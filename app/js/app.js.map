{"version":3,"sources":["_tactical.js","_enemies.js","_friendlies.js","_game.js","_starfire_menu.js","_starfire_ui.js","_localstart.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvqtzfA;AACA;AACA;AACA","file":"app.js","sourcesContent":["const Tactical = function(name, cssClass, description) {\n  this.name = name;\n  this.cssClass = cssClass;\n  this.description = description;\n  this.type = \"basic\";\n  this.card = \"<li class='tactical \" + this.cssClass + \"'>\"\n            + \"<h3>\" + this.name + \"</h3>\"\n            + \"<p>\" + this.description + \"</p>\"\n            + \"</li>\";\n}\n\nconst AdvTactical = function(name, cssClass, description, cost) {\n  Tactical.call(this, name, cssClass, description);\n  this.cost = cost;\n  this.type = \"advanced\";\n  this.card = \"<li class='advTactical \" + this.cssClass + \"'>\"\n              + \"<h3>\" + this.name + \"</h3>\"\n              + \"<p>\" + this.description + \"</p>\"\n              + \"<p class='cost'>Merit cost: \" + this.cost + \"</p>\"\n              + \"</li>\"\n}\nAdvTactical.prototype = Object.create(Tactical.prototype);\n\nAdvTactical.prototype.generateCard = function(player) {\n  if (player.merit >= this.cost) {\n    return \"<li class='advTactical \" + this.cssClass + \" purchasable'>\"\n            + \"<h3>\" + this.name + \"</h3>\"\n            + \"<p>\" + this.description + \"</p>\"\n            + \"<p class='cost'> Merit cost: \" + this.cost + \"</p>\"\n            + \"</li>\";\n  } else {\n    return \"<li class='advTactical \" + this.cssClass + \" unavailable'>\"\n            + \"<h3>\" + this.name + \"</h3>\"\n            + \"<p>\" + this.description + \"</p>\"\n            + \"<p class='cost'> Merit cost: \" + this.cost + \"</p>\"\n            + \"</li>\";\n  }\n}\n\n//temporarily declared as var for safari\n// Tactical cards\nvar repairDrone = new Tactical(\"Repair drone\", \"repairDrone\", \"Remove 3 damage from a friendly (any)\");\nvar missile = new Tactical(\"Missile\", \"missile\", \"Choose a target and roll 5 combat dice\");\nvar drawFire = new Tactical(\"Draw Fire\", \"drawFire\", \"Remove a pursuer from a friendly (other) and bring it to you\");\nvar feint = new Tactical(\"Feint\", \"feint\", \"Reuse the last tactical card you used this round\");\nvar barrelRoll = new Tactical(\"Barrel Roll\", \"barrelRoll\", \"Remove a pursuer from yourself. It now pursues the friendly base\");\nvar scatterShot = new Tactical(\"Scattershot\", \"scatterShot\", \"Deal 2 damage to a single target, and 1 damage to the target on either side of it\");\nvar immelman = new Tactical(\"Immelmann\", \"immelman\", \"Missile an enemy pursuing you\");\n\n// Advanced tactics\n// var medalOfHonor = new AdvTactical(\"Medal of Honor\", \"medalOfHonor\", \"Every enemy destroyed is worth 1 extra merit\", 10);\n// var daredevil = new AdvTactical(\"Daredevil\", \"daredevel\", \"Allows you to attack the EB with 1 pursuer\", 10);\n// var medic = new AdvTactical(\"Medic\", \"medic\", \"Restore 1 armor to a friendly of your choice each round\", 10);\n// var sharpShooter = new AdvTactical(\"Sharp Shooter\", \"sharpshooter\", \"Improve player accuracy rolls/add an extra die\", 10);\nvar repairDrone = new AdvTactical(\"Repair drone\", \"repairDrone\", \"Remove 3 damage from a friendly (any)\", 3);\nvar bomb = new AdvTactical(\"Bomb\", \"bomb\", \"Deal 6 damage to a single target, and 2 damage to the target on either side of it\", 8);\nvar heatSeeker = new AdvTactical(\"Heat Seeker\", \"heatSeeker\", \"Deal 5 damage to a chosen enemy\", 5);\nvar healthPack = new AdvTactical(\"Health Pack\", \"healthPack\", \"Remove 5 damage from a friendly (all)\", 4);\nvar jammer = new AdvTactical(\"Jammer\", \"jammer\", \"Do not draw an enemy base card next round\", 6);\nvar intercept = new AdvTactical(\"Intercept\", \"intercept\", \"Draw one less enemy into play next round\", 6);\nvar emp = new AdvTactical(\"EMP\", \"emp\", \"Choose a friendly (other). Their pursuers cannot damage them this round\", 5);\nvar countermeasures = new AdvTactical(\"Countermeasures\", \"countermeasures\", \"Ignore x damage where x is the result of a standard combat roll\", 2);\nvar divertShields = new AdvTactical(\"Divert Shields\", \"divertShields\", \"Keep this card. It absorbs the next 5 damage you take\", 3);\nvar jump = new AdvTactical(\"Jump\", \"jump\", \"Shake all your pursuers this round to discard\", 15);\nvar hardSix = new AdvTactical(\"Roll the hard six\", \"hardSix\", \"If pursued, missile the enemy base and take damage of a standard combat roll\", 6);\nvar snapshot = new AdvTactical(\"Snapshot\", \"snapshot\", \"Remove an enemy from play (no merit awarded)\", 7);\nvar guidedMissile = new AdvTactical(\"Guided Missile\", \"guidedMissile\", \"Deal 6 damage to the enemy base regardless of pursuers\", 10);\nvar incinerate = new AdvTactical(\"Incinerate\", \"incinerate\", \"Destroy the first enemy drawn to you next round\", 7);\n\n// IF MIGRATED TO SERVER SIDE\n// module.exports.Tactical = Tactical;\n","const EnemyBase = function() {\n  this.name = \"Enemy Base\";\n  this.maxArmor = 30;\n  this.currentArmor = 30;\n  this.enemyBaseDeck = {\n    name: \"Enemy Base Deck\",\n    cards: [],\n    discard: [],\n  };\n  this.enemyBaseCardsPerTurn = 1;\n  this.currentEnemyBaseCard = [];\n  this.enemyDeck = {\n    name: \"Enemy Deck\",\n    cards: [],\n    discard: []\n  };\n  this.enemiesActive = [];\n  this.enemiesPerTurn;\n  this.effects = {\n    jammed: false,\n    intercepted: false,\n    deploy: false\n  }\n  this.summary = \"<h3>\" + this.name + \"</h3>\"\n          + \"<p>Armor: \" + this.currentArmor + \"/\" + this.maxArmor + \"</p>\"\n          + \"<p>Launch rate: \" + this.enemiesPerTurn + \"</p>\";\n}\n\nEnemyBase.prototype.updateSummary = function() {\n  if (game.roundNumber === 1) {\n    this.summary = \"<h3>\" + this.name + \"</h3>\"\n                    + \"<p>Armor: \" + this.currentArmor + \"/\"\n                    + this.maxArmor + \"</p>\"\n                    + \"<p>Launch rate: \" + this.enemiesPerTurn + \"</p>\";\n  } else if (this.currentEnemyBaseCard.length === 0 && game.roundNumber > 1) {\n    this.summary = \"<h3>\" + this.name + \"</h3>\"\n                    + \"<p>Armor: \" + this.currentArmor + \"/\"\n                    + this.maxArmor + \"</p>\"\n                    + \"<p>Launch rate: \" + this.enemiesPerTurn + \"</p>\"\n                    + \"<div class='enemyBaseCard'><h3>Jammed</h3></div>\";\n  } else {\n    this.summary = \"<h3>\" + this.name + \"</h3>\"\n                    + \"<p>Armor: \" + this.currentArmor + \"/\"\n                    + this.maxArmor + \"</p>\"\n                    + \"<p>Launch rate: \" + this.enemiesPerTurn + \"</p>\"\n                    + this.currentEnemyBaseCard[0].card;\n  }\n}\n\nEnemyBase.prototype.takeDamage = function(damage) {\n  this.currentArmor -= damage;\n  if (this.currentArmor < 0) {\n    this.currentArmor = 0;\n  }\n  if (this.currentArmor === 0) {\n    console.log(this.name + \" destroyed! Players win.\");\n  }\n  this.updateSummary();\n}\n\nEnemyBase.prototype.addEnemy = function() {\n  game.checkDeck(this.enemyDeck);\n  this.enemiesActive.push(this.enemyDeck.cards.pop());\n}\n\nEnemyBase.prototype.replaceEnemyBaseCard = function() {\n  if (this.effects.jammed === true) {\n    this.enemyBaseDeck.discard.push(this.currentEnemyBaseCard.pop());\n    this.effects.jammed = false;\n  } else {\n    game.replaceCards(this.enemyBaseCardsPerTurn, this.enemyBaseDeck,\n                      this.currentEnemyBaseCard);\n    let ebCard = this.currentEnemyBaseCard[0];\n    this[ebCard.cssClass]();\n  }\n}\n\n\n/************************\nENEMY BASE CARD FUNCTIONS\n*************************/\n\nEnemyBase.prototype.reinforce = function() {\n  console.log(this.name + \" will launch one extra enemy card into play each round.\");\n  this.enemiesPerTurn += 1;\n}\n\nEnemyBase.prototype.repair = function() {\n  this.currentArmor += 5;\n  if (this.currentArmor > this.maxArmor) {\n    this.currentArmor = this.maxArmor;\n  }\n  console.log(this.name + \" Repairs 5 damage. Current armor: \"\n              + this.currentArmor + \"/\" + this.maxArmor);\n}\n\nEnemyBase.prototype.fireHeavy = function() {\n  console.log(this.name + \" fires heavy weapons.\");\n  FriendlyBase.takeDamage(5);\n}\n\nEnemyBase.prototype.fireLight = function() {\n  console.log(this.name + \" fires light weapons.\");\n  FriendlyBase.takeDamage(3);\n}\n\nEnemyBase.prototype.deploy = function() {\n  console.log(this.name + \" launches an extra fighter.\");\n  this.effects.deploy = true;\n}\n\nconst Enemy = function(name, cssClass, armor, power, targeting, merit) {\n  this.name = name;\n  this.cssClass = cssClass;\n  this.armor = armor;\n  this.currentArmor = this.armor;\n  this.power = power;\n  this.targeting = targeting;\n  this.merit = merit;\n  if (this.cssClass === \"emptySpace\" || this.cssClass === \"destroyed\") {\n    this.card = \"<li class='enemy \" + this.cssClass + \"'>\";\n              + \"<h3>\" + this.name + \"</h3>\"\n              + \"</li>\";\n  } else {\n    this.card = \"<li class='enemy \" + this.cssClass + \"'>\"\n            + \"<h3>\" + this.name + \"</h3>\"\n            + \"<p>ARM: \" + this.currentArmor + \"/\" + this.armor + \"</p>\"\n            + \"<p>PWR: \" + this.power + \"</p>\"\n            + \"<p>TGT: \" + this.targeting + \"</p>\"\n            + \"<p>MRT: \" + this.merit + \"</p>\"\n            + \"</li>\";\n  }\n}\n\n// Enemy.prototype.updateCard = function(currentArmor) {\n//   if (this.cssClass === \"emptySpace\" || this.cssClass === \"destroyed\") {\n//     this.card = \"<li class='enemy \" + this.cssClass + \"'>\";\n//               + \"<h3>\" + this.name + \"</h3>\"\n//               + \"</li>\";\n//   } else {\n//     this.card = \"<li class='enemy \" + this.cssClass + \"'>\"\n//             + \"<h3>\" + this.name + \"</h3>\"\n//             + \"<p>ARM: \" + currentArmor + \"/\" + this.armor + \"</p>\"\n//             + \"<p>PWR: \" + this.power + \"</p>\"\n//             + \"<p>TGT: \" + this.targeting + \"</p>\"\n//             + \"<p>MRT: \" + this.merit + \"</p>\"\n//             + \"</li>\";\n//   }\n// }\n\nEnemy.prototype.takeDamage = function(damage) {\n  this.currentArmor -= damage;\n  if (this.currentArmor < 0) {\n    this.currentArmor = 0;\n  }\n  this.updateCard();\n}\n\nEnemy.prototype.resetArmor = function() {\n  this.currentArmor = this.armor;\n}\n\nconst EnemyBaseCard = function(name, cssClass, description) {\n  this.name = name;\n  this.cssClass = cssClass;\n  this.description = description;\n  this.card = \"<p id='enemyBaseCard'>\" + this.description + \"</p>\";\n}\n\n//temporarily declared as var for safari\n// define enemy types\nvar ace = new Enemy(\"Ace\",\"ace\",6,4,5,4);\nvar heavy = new Enemy(\"Heavy\",\"heavy\",5,3,3,3);\nvar medium = new Enemy(\"Medium\",\"medium\",4,2,4,2);\nvar light = new Enemy(\"Light\",\"light\",3,2,4,1);\nvar empty = new Enemy(\"Empty space\",\"emptySpace\",0,0,0,0);\nvar placeHolder = new Enemy(\"Destroyed\",\"destroyed\",0,0,0,0);\n\n// define enemy base cards\nvar fireLight = new EnemyBaseCard(\"Fire light weapons\", \"fireLight\", \"Friendly base takes 3 damage\");\nvar fireHeavy = new EnemyBaseCard(\"Fire heavy weapons\", \"fireHeavy\", \"Friendly base takes 5 damage\");\nvar deploy = new EnemyBaseCard(\"Deploy\", \"deploy\", \"Draw an extra enemy card into play in the next round\");\nvar repair = new EnemyBaseCard(\"Repairs\", \"repair\", \"Enemy base repairs 5 armor.\");\nvar reinforce = new EnemyBaseCard(\"Reinforcements\", \"reinforce\", \"Increase the amount enemies that enter the fray each turn by 1\");\n\n\nvar enemyBase = new EnemyBase();\n// IF MIGRATED TO SERVER SIDE\n// module.exports.EnemyBase = EnemyBase;\n// module.exports.Enemy = Enemy;\n","//IF MIGRATED TO SERVER SIDE\n// let enemies = require(\"./enemies\");\n// let tactical = require(\"./tactical\");\n\n\n/**************************\nFRIENDLY BASE CONSTRUCTOR\n**************************/\n\nconst Friendly = function(id, name, maxArmor) {\n  this.id = id;\n  this.name = name;\n  this.maxArmor = maxArmor;\n  this.pursuers = [];\n  this.pursuerDamage = [];\n  this.effects = {\n    medalOfHonor: false,\n    medic: false,\n    daredevil: false,\n    sharpShooter: false,\n    emp: false,\n    countermeasures: false,\n    divertShields: 0,\n    status: \"Pursued\"\n  };\n  this.market = [];\n  this.marketSize = 4;\n  this.advTactics = {\n    name: \"Advanced tactics\",\n    cards: [],\n    discard: []\n  };\n  this.currentArmor = maxArmor;\n  this.summary = \"<h3>\" + this.name + \"</h3>\"\n            + \"<p>Armor: \" + this.currentArmor + \"/\" + this.maxArmor + \"</p>\"\n            + \"<p class='pursued'>\" + this.effects.status + \"</p>\";\n}\n\n\n\n/**************************\nFRIENDLY BASE UTILITY METHODS\n**************************/\n\nFriendly.prototype.adjustPursuerDamage = function() { // Player should inherit\n  while (this.pursuerDamage.length < this.pursuers.length) {\n    this.pursuerDamage.push(0);\n  }\n  while (this.pursuerDamage.length > this.pursuers.length) {\n    this.pursuerDamage.pop();\n  }\n}\n\nFriendly.prototype.updateSummary = function() {\n  this.effects.status = \"Free\";\n  this.summary = \"<h3>\" + this.name + \"</h3>\"\n            + \"<p>Armor: \" + this.currentArmor + \"/\" + this.maxArmor + \"</p>\";\n  for (let i=0; i<this.pursuers.length; i++) {\n    let enemy = this.pursuers[i];\n    if (enemy.merit > 0) {\n      this.effects.status = \"Pursued\";\n    }\n  }\n  if (this.effects.status === \"Pursued\") {\n    this.summary += \"<p class='pursued'>\" + this.effects.status + \"</p>\";\n  } else {\n    this.summary += \"<p class='free'>\" + this.effects.status + \"</p>\";\n  }\n}\n\nFriendly.prototype.removeAdvTactic = function(index) {\n  game.moveCard(index, this.market, game.tacticalDeck.discard);\n}\n\nFriendly.prototype.addAdvTactic = function() {\n  let addToMarket = this.marketSize - this.market.length;\n  for (let i = 0; i < addToMarket; i++) {\n    game.checkDeck(this.advTactics);\n    this.market.push(this.advTactics.cards.pop());\n  }\n}\n\nFriendly.prototype.checkShields = function(damage) {\n  if (this.effects.divertShields > 0) {\n    let difference = this.effects.divertShields - damage;\n    if (difference > 0) {\n      this.effects.divertShields -= damage;\n      damage = 0;\n    } else if (difference < 0) {\n      damage -= this.effects.divertShields;\n      this.effects.divertShields = 0;\n    } else {\n      damage = 0;\n      this.effects.divertShields = 0;\n    }\n    console.log(this.name + \"'s shields reduce damage to \"\n                + damage);\n  }\n  return damage;\n}\n\nFriendly.prototype.checkDamageNegation = function(damage) {\n  if (this.effects.emp) {\n    console.log(this.name + \" is protected by EMP.\");\n    this.effects.emp = false;\n    return 0;\n  } else {\n    return damage;\n  }\n}\n\nFriendly.prototype.takeDamage = function(damage) {\n  // take damage\n  if (damage > 0) {\n    this.currentArmor -= damage;\n    if (this.currentArmor < 0) {\n      this.currentArmor = 0;\n    }\n    if (this.currentArmor === 0) {\n      console.log(this.name + \" has been destroyed. Players lose.\")\n      //end game;\n    } else {\n      console.log(this.name + \" takes \" + damage + \" damage. Current armor: \"\n                  + this.currentArmor + \"/\" + this.maxArmor);\n    }\n  }\n}\n\nFriendly.prototype.insertPlaceholder = function(index) { // Player should inherit\n  //removes an enemy card from the fray and inserts a \"destroyed\" place holder\n  this.pursuers.splice(index, 0, placeHolder);\n  this.pursuers.join();\n}\n\n\n\n/**************************\nPLAYER CONSTRUCTOR\n**************************/\n\nconst Player = function(id, name) {\n  this.id = id;\n  this.name = name;\n  this.maxArmor = 10;\n  this.currentArmor = this.maxArmor;\n  this.tacticalCardsPerTurn = 3;\n  this.lastCardUsed = null;\n  this.hand = [];\n  this.pursuers = [];\n  this.pursuerDamage = [];\n  this.merit = 0;\n  this.combatDie = [0,0,0,1,1,2];\n  this.improvedDie = [0,0,1,1,1,2];\n  this.missileDie = [0,0,1,1,2,2];\n  this.amtImproved = 0;\n  this.effects = {\n    medalOfHonor: false,\n    medic: false,\n    daredevil: false,\n    sharpShooter: false,\n    emp: false,\n    countermeasures: false,\n    divertShields: 0,\n    incinerator: false,\n    status: \"Pursued\"\n  };\n  this.summary = \"<h3>\" + this.name + \"</h3>\"\n                + \"<p>Armor: \" + this.currentArmor + \"/\"\n                + this.maxArmor + \"</p>\"\n                + \"<p>Merit: \" + this.merit + \"</p>\"\n                + \"<p class='pursued'>\" + this.effects.status + \"</p>\";\n}\n\n\n\n/**************************\nPLAYER UTILITY METHODS\n**************************/\n\n\n\nPlayer.prototype.insertPlaceholder = Friendly.prototype.insertPlaceholder;\nPlayer.prototype.checkShields = Friendly.prototype.checkShields;\nPlayer.prototype.adjustPursuerDamage = Friendly.prototype.adjustPursuerDamage;\n\nPlayer.prototype.resetCardsUsed = function() {\n  this.lastCardUsed = null;\n}\n\nPlayer.prototype.updateSummary = function() {\n  this.effects.status = \"Free\";\n  this.summary = \"<h3>\" + this.name + \"</h3>\"\n                  + \"<p>Armor: \" + this.currentArmor\n                  + \"/\" + this.maxArmor + \"</p>\"\n                  + \"<p>Merit: \" + this.merit + \"</p>\";\n  for (let i=0; i<this.pursuers.length; i++) {\n    let enemy = this.pursuers[i];\n    if (enemy.merit > 0) {\n      this.effects.status = \"Pursued\";\n    }\n  }\n  if (this.effects.status === \"Pursued\") {\n    this.summary += \"<p class='pursued'>\" + this.effects.status + \"</p>\";\n  } else {\n    this.summary += \"<p class='free'>\" + this.effects.status + \"</p>\";\n  }\n}\n\nPlayer.prototype.setAmtImproved = function() {\n  // set interval for the amount of improved dice\n  this.amtImproved = Math.floor(this.merit/5);\n}\n\nPlayer.prototype.damageRoll = function(list) {\n  // return a random value from a list\n  return list[Math.floor(Math.random() * list.length)];\n}\n\nPlayer.prototype.increaseMerit = function(amount) {\n  let merit = amount;\n  if (this.effects.medalOfHonor === true) {\n    merit += 1;\n  }\n  this.merit += merit;\n  console.log(this.name + \" receives \" + merit + \" merit.\");\n}\n\n// calculate damage // only returning 0\nPlayer.prototype.calcDamage = function(dice) {\n  // roll a combat die x times and add the rolls together\n  let totalRolls = dice;\n  let improvedRolls = this.amtImproved;\n  let normalRolls = totalRolls - improvedRolls;\n  let damage = 0;\n  while (normalRolls > 0) {\n      damage += this.damageRoll(this.combatDie);\n      normalRolls--;\n    }\n  while (improvedRolls > 0) {\n      damage += this.damageRoll(this.improvedDie);\n      improvedRolls--;\n    }\n    return damage;\n}\n\nPlayer.prototype.checkDeath = function() {\n  // see if player is dead\n  if (this.currentArmor <= 0) {\n    console.log(this.name + \" has been destroyed.\");\n    game.distributeEnemies(this.pursuers);\n    game.friendlies.splice(game.friendlies.indexOf(this), 1);\n    game.friendlies.join();\n    if (game.friendlies === [FriendlyBase]) {\n      console.log(\"All pilots destroyed. Players lose.\");\n    }\n  }\n}\n\nPlayer.prototype.checkDamageNegation = function(damage) {\n  if (damage > 0) {\n    if (this.effects.emp) {\n      console.log(this.name + \" is protected by EMP.\");\n      this.effects.emp = false;\n      return 0;\n    } else {\n      damage = this.checkShields(damage);\n      if (this.effects.countermeasures) {\n        let counterDamage = this.calcDamage(4);\n        console.log(this.name + \" deploys countermeasures to avoid \"\n                    + counterDamage + \" damage.\");\n        damage -= counterDamage;\n        this.effects.countermeasures = false;\n      }\n      if (damage < 0) {\n        damage = 0;\n        console.log(\"All damage to \" + this.name + \" negated.\");\n      } else {\n        return damage;\n      }\n    }\n  } else {\n    return damage;\n  }\n}\n\nPlayer.prototype.takeDamage = function(damage) {\n  if (damage > 0) {\n    this.currentArmor -= damage;\n    if (this.currentArmor < 0) {\n      this.currentArmor = 0;\n    }\n    console.log(this.name + \" takes \" + damage + \" damage. Current armor: \"\n                + this.currentArmor + \"/\" + this.maxArmor);\n  }\n}\n\nPlayer.prototype.checkKill = function(friendly, index) {\n  // if kill: award merit, insert placeholder\n  if (friendly.pursuerDamage[index] >= friendly.pursuers[index].armor) {\n    console.log(friendly.pursuers[index].name + \" pursuing \" + friendly.name\n                + \" destroyed.\")\n    this.increaseMerit(friendly.pursuers[index].merit);\n    game.moveCard(index, friendly.pursuers, enemyBase.enemyDeck.discard);\n    friendly.insertPlaceholder(index);\n  }\n}\n\nPlayer.prototype.doDamage = function(friendly, index, damage) {\n  // if damage is more than 0, deal damage to a selected enemy, check for kill\n  // does not allow damage to empty space or place holders\n  if (friendly === undefined) {\n    friendly = this;\n  }\n  if (index === undefined) {\n    index = 0;\n  }\n  if (friendly === enemyBase) {\n    enemyBase.takeDamage(damage);\n    console.log(this.name + \" deals \" + damage + \" damage to enemy base.\");\n    this.increaseMerit(1);\n  } else {\n    if (friendly.pursuers[index] === empty\n      || friendly.pursuers[index] === placeHolder) {\n      console.error(\"No enemy at index \" + index);\n    } else {\n      if (damage > 0) {\n        friendly.pursuerDamage[index] += damage;\n        let enemyArmor = friendly.pursuers[index].armor - friendly.pursuerDamage[index];\n        if (enemyArmor < 0) {\n          enemyArmor = 0;\n        }\n        console.log(this.name + \" deals \" + damage + \" damage to \"\n                    + friendly.pursuers[index].name + \" pursuing \"\n                    + friendly.name + \". Current armor: \"\n                    + enemyArmor\n                    + \"/\" + friendly.pursuers[index].armor);\n        this.checkKill(friendly, index);\n      } else {\n        console.log(\"No damage to target.\");\n      }\n    }\n  }\n}\n\n\n\n/**************************\nPLAYER TACTICAL FUNCTIONS\n**************************/\n\nPlayer.prototype.fire = function(friendly, pursuerIndex) {\n  // deal damage equal to 4 combat dice to target\n  let damage = this.calcDamage(4);\n  this.doDamage(friendly, pursuerIndex, damage);\n}\n\nPlayer.prototype.evade = function(friendly, pursuerIndex) {\n  if (friendly === undefined) {\n    friendly = this;\n  }\n  // choose a target and attempt evade (D6 vs. enemy targeting)\n  let evadeRoll = Math.floor(Math.random() * 6) + 1;\n  let pursuer = this.pursuers[pursuerIndex];\n  if (evadeRoll >= pursuer.targeting) {\n    console.log(this.name + \" shakes \" + pursuer.name + \" to friendly base.\");\n    game.moveCard(pursuerIndex, this.pursuers, FriendlyBase.pursuers);\n    game.moveCard(pursuerIndex, this.pursuerDamage, FriendlyBase.pursuerDamage);\n    this.insertPlaceholder(pursuerIndex);\n    this.adjustPursuerDamage();\n    FriendlyBase.adjustPursuerDamage();\n  } else {\n    console.log(this.name + \" can't shake 'em!\")\n  }\n}\n\nPlayer.prototype.missile = function(friendly, pursuerIndex) {\n  // deal damage equal to 5 combat dice to target\n  let damage = this.calcDamage(4) + this.damageRoll(this.missileDie);\n  this.doDamage(friendly, pursuerIndex, damage);\n}\n\nPlayer.prototype.heatSeeker = function(friendly, pursuerIndex) {\n  // deal 5 damage to target\n  this.doDamage(friendly, pursuerIndex, 5);\n}\n\nPlayer.prototype.bomb = function(friendly, pursuerIndex, damage, collateral) { // throwing error when attack enemyBase\n    // deal 6 damage to target and 2 damage to each adjacent targeting\n    // if there is no adjacent target, collateral damage is applied to pursued ally\n    // flat 10 damage to enemyBase\n    if (pursuerIndex === undefined) {\n      pursuerIndex = 0;\n    }\n    if (damage === undefined) {\n      damage = 6;\n    }\n    if (collateral === undefined) {\n      collateral = 2;\n    }\n    let friendlyFire = 0;\n    if (friendly === enemyBase) {\n      baseDamage = damage+(collateral*2);\n      this.doDamage(enemyBase, pursuerIndex, baseDamage);\n    } else {\n      let adjacentLeft = pursuerIndex - 1;\n      let adjacentRight = pursuerIndex + 1;\n      if (friendly.pursuers[adjacentLeft] === placeHolder) {\n        while (friendly.pursuers[adjacentLeft] === placeHolder) {\n          adjacentLeft -= 1;\n        }\n      }\n      if (friendly.pursuers[adjacentRight] === placeHolder) {\n        while (friendly.pursuers[adjacentRight] === placeHolder) {\n          adjacentRight += 1;\n        }\n      }\n      if (adjacentRight < friendly.pursuers.length &&\n        friendly.pursuers[adjacentRight] != empty) {\n          this.doDamage(friendly, adjacentRight, collateral);\n      } else {\n          friendlyFire += collateral;\n      }\n      this.doDamage(friendly, pursuerIndex, damage);\n      if (adjacentLeft > -1 &&\n        friendly.pursuers[adjacentLeft] != empty) {\n          this.doDamage(friendly, adjacentLeft, collateral);\n      } else {\n          friendlyFire += collateral;\n      }\n      friendly.takeDamage(friendly.checkShields(friendlyFire));\n    }\n}\n\nPlayer.prototype.repairDrone = function(friendly, index, repairPoints, meritReward) {\n  // repair a selected ally, can choose self, award merit if not self\n  if (index === undefined) {\n    index = 0;\n  }\n  if (repairPoints === undefined) {\n    repairPoints = 3;\n  }\n  if (meritReward === undefined) {\n    meritReward = 2;\n  }\n  if (friendly.currentArmor < friendly.maxArmor) {\n    friendly.currentArmor += repairPoints;\n    if (friendly.currentArmor > friendly.maxArmor) {\n      friendly.currentArmor = friendly.maxArmor;\n    }\n    if (this != friendly) {\n      this.increaseMerit(meritReward);\n    }\n    console.log(this.name + \" repairs \" + repairPoints + \" damage on \"\n                + friendly.name + \". Current armor: \"\n                + friendly.currentArmor + \"/\" + friendly.maxArmor)\n  } else {\n    console.error(friendly.name + \" is already at maximum armor.\");\n  }\n}\n\nPlayer.prototype.drawFire = function(friendly, index) {\n  // choose an ally's pursuer and bring it to you\n  console.log(friendly.pursuers[index].name + \" moves from \" + friendly.name\n              + \" to \" + this.name + \".\");\n  this.increaseMerit(friendly.pursuers[index].merit);\n  game.moveCard(index, friendly.pursuers, this.pursuers);\n  game.moveCard(index, friendly.pursuerDamage, this.pursuerDamage);\n  friendly.insertPlaceholder(index);\n  this.adjustPursuerDamage();\n  friendly.adjustPursuerDamage();\n}\n\nPlayer.prototype.feint = function(friendly, pursuerIndex) {\n  // choose a tCard previously used this round and play it again\n  if (this.lastCardUsed) {\n    let card = this.lastCardUsed;\n    let action = this.lastCardUsed.cssClass;\n    console.log(this.name + \" uses feint to play \" + card.name)\n    this[action](friendly, pursuerIndex);\n  } else {\n    console.error(\"No action to feint\");\n  }\n}\n\nPlayer.prototype.barrelRoll = function(friendly, pursuerIndex) {\n  if (friendly === undefined) {\n    friendly = this;\n  }\n  // move pursuer at pursuerIndex to friendly base\n  console.log(this.name + \" does a barrel roll! \" + this.pursuers[pursuerIndex].name + \" now pursues \"\n              + FriendlyBase.name + \".\");\n  game.moveCard(pursuerIndex, this.pursuers, FriendlyBase.pursuers);\n  game.moveCard(pursuerIndex, this.pursuerDamage, FriendlyBase.pursuerDamage);\n  this.insertPlaceholder(pursuerIndex);\n  this.adjustPursuerDamage();\n  FriendlyBase.adjustPursuerDamage();\n}\n\nPlayer.prototype.scatterShot = function(friendly, pursuerIndex) {\n  // deal a small amount of damage to 3 adjacent targets\n  this.bomb(friendly, pursuerIndex, 2, 1)\n}\n\nPlayer.prototype.immelman = function(friendly, index) {\n  // bind click events to the player's pursuers\n  // have them choose a pursuer\n  this.missile(this, index);\n}\n\n\n\n/**************************\nPLAYER ADVANCED TACTICAL FUNCTIONS\n**************************/\n\nPlayer.prototype.medalOfHonor = function() {\n  this.effects.medalOfHonor = true;\n  console.log(this.name + \" will now receive +1 merit any time they are awarded merit.\");\n}\n\nPlayer.prototype.daredevil = function() {\n  // allow player to attack enemy base if they have one or no pursuers\n  this.effects.daredevil = true;\n  console.log(this.name + \" can now attack the enemy base with one pursuer.\");\n}\n\nPlayer.prototype.medic = function() {\n  this.effects.medic = true;\n  console.log(this.name + \" can now repair 1 damage on a chosen ally each round.\");\n}\n\nPlayer.prototype.sharpShooter = function() {\n  this.effects.sharpShooter = true;\n  console.log(this.name + \" is now better at hurting things.\");\n}\n\nPlayer.prototype.healthPack = function(friendly, index) {\n  if (index === undefined) {\n    index = 0;\n  }\n  this.repairDrone(friendly, index, 5, 0);\n}\n\nPlayer.prototype.intercept = function() {\n  enemyBase.effects.intercepted = true;\n  console.log(intercept.description);\n}\n\nPlayer.prototype.jammer = function() {\n  enemyBase.effects.jammed = true;\n  console.log(jammer.description);\n}\n\nPlayer.prototype.emp = function(friendly) {\n  friendly.effects.emp = true;\n  console.log(this.name + \" blasts \" + friendly.name + \"'s pursuers with an EMP. \"\n              + friendly.name + \" will not be damaged this round.\");\n}\n\nPlayer.prototype.countermeasures = function() {\n  this.effects.countermeasures = true;\n  console.log(this.name + \" prepares countermeasures...\")\n}\n\nPlayer.prototype.divertShields = function() {\n  this.effects.divertShields = 5;\n  console.log(this.name + \" powers up shields. Next 5 damage will be negated.\")\n}\n\nPlayer.prototype.jump = function() {\n  // shake all pursuers\n  console.log(this.name + \" shakes \" + this.pursuers.length\n              + \" pursuers to the friendly base.\");\n  for (let i = 0; i = this.pursuers.length; i++) {\n    enemyBase.enemyDeck.discard.push(this.pursuers.pop());\n  }\n}\n\nPlayer.prototype.hardSix = function() {\n  console.log(\"Sometimes you gotta roll the hard six.\");\n  this.missile(enemyBase, undefined);\n  this.takeDamage(this.calcDamage(4));\n}\n\nPlayer.prototype.snapshot = function(friendly, pursuerIndex) {\n  console.log(this.name + \" destroys \" + friendly.pursuers[pursuerIndex].name\n              + \" pursuing \" + friendly.name);\n  game.moveCard(pursuerIndex, friendly.pursuers, enemyBase.enemyDeck.discard);\n  this.insertPlaceholder(pursuerIndex);\n}\n\nPlayer.prototype.guidedMissile = function() {\n  console.log(this.name + \" fires a guided missile at \" + enemyBase.name);\n  enemyBase.takeDamage(6);\n}\n\nPlayer.prototype.incinerate = function() {\n  console.log(this.name + \" prepares afterburner...\");\n  this.effects.incinerator = true;\n}\n\n\n/**************************\nGENERIC FUNCTIONS TO USE TACTICAL CARDS\n**************************/\n\nPlayer.prototype.useAdvTactic = function(advTactic, friendly, pursuerIndex) {\n  // takes the index of a market card and uses that card if the player has enough merit\n  // optional arguments 'friendly' and 'pursuerIndex' defines a target for the card\n  if (friendly === undefined) {\n    friendly = this;\n  }\n  let choice = FriendlyBase.market[advTactic];\n  this.lastCardUsed = choice;\n  let action = choice.cssClass;\n  if (this.merit >= choice.cost) {\n    this.merit -= choice.cost;\n    this[action](friendly, pursuerIndex);\n    FriendlyBase.removeAdvTactic(advTactic);\n  } else {\n    console.log(this.name + \" does not have enough merit.\");\n  }\n}\n\nPlayer.prototype.useTactic = function(cardIndex, friendly, pursuerIndex) {\n  // takes the index of a card in hand and uses that card\n  // optional argument 'friendly' defines a player target for the card\n  // optional argument 'pursuerIndex' defines an enemy target in friendly.hand\n  if (friendly === undefined) {\n    friendly = this;\n  }\n  if (pursuerIndex === undefined) {\n    pursuerIndex = 0;\n  }\n  let card = this.hand[cardIndex];\n  let action = card.cssClass;\n  console.log(this.name + \" uses \" + card.name)\n  this[action](friendly, pursuerIndex);\n  if (action != \"feint\") {\n    this.lastCardUsed = card;\n  }\n  game.moveCard(cardIndex, this.hand, game.tacticalDeck.discard)\n  if (friendly === this) {\n    this.updateSummary();\n  } else {\n    this.updateSummary();\n    friendly.updateSummary();\n  }\n}\n\nPlayer.prototype.discard = function(cardIndex, action, friendly, pursuerIndex, advIndex) {\n  if (friendly === undefined) {\n    friendly = this;\n  }\n  if (pursuerIndex === undefined) {\n    pursuerIndex = 0;\n  }\n  if (action === \"useAdvTactic\") {\n    this.useAdvTactic(advIndex, friendly, pursuerIndex);\n  } else {\n    this[action](friendly, pursuerIndex);\n  }\n  game.moveCard(cardIndex, this.hand, game.tacticalDeck.discard);\n  if (friendly === this) {\n    this.updateSummary();\n  } else {\n    this.updateSummary();\n    friendly.updateSummary();\n  }\n}\n\n\n//temporarily declared as var for Safari\nvar FriendlyBase = new Friendly(\"FriendlyBase\", \"Friendly Base\", 30);\nvar Player1 = new Player(\"Player1\", \"Nathan\");\nvar Player2 = new Player(\"Player2\", \"Rudi\");\nvar Player3 = new Player(\"Player3\", \"Ruth\");\nvar Player4 = new Player(\"Player4\", \"Alan\");\n\n// IF MIGRATED TO SERVER SIDE\n// module.exports.FriendlyBase = FriendlyBase;\n// module.exports.Player = Player;\n","// let friendlies = require(\"./friendlies\");\n// let tactical = require(\"./tactical\");\n// let enemies = require(\"./enemies\");\n\nconst Game = function() {\n  this.name = \"Starfire\";\n  this.difficulty = 3;\n  this.roundNumber = 0;\n  this.friendlies = [FriendlyBase, Player1, Player2];\n  this.tacticalDeck = {\n    name: \"Tactical deck\",\n    cards: [],\n    discard: []\n  };\n  this.gameID = 1;\n}\n\nGame.prototype.moveCard = function(index, origin, destination) {\n  let removed = origin.splice(index, 1);\n  destination.push(removed[0]);\n  origin.join();\n}\n\nGame.prototype.randomIndex = function(number) {\n   let random = Math.floor(Math.random() * number);\n   return random;\n }\n\nGame.prototype.shuffle = function(deck) {\n    let randIndex, x, i;\n    let length, list;\n    if (deck.cards === undefined) {\n      length = deck.length;\n      list = deck;\n    } else {\n      length = deck.cards.length;\n      list = deck.cards;\n    }\n    for (i = length; i; i--) {\n        randIndex = Math.floor(Math.random() * i);\n        x = list[i - 1];\n        list[i - 1] = list[randIndex];\n        list[randIndex] = x;\n    }\n}\n\nGame.prototype.checkDeck = function(deck) {\n  // if deck is empty, replace with discard and shuffle\n  if (deck.cards.length === 0) {\n    while (deck.discard.length > 0) {\n      deck.cards.push(deck.discard.pop());\n    }\n    this.shuffle(deck);\n    console.log(deck.name + \" shuffled.\");\n  }\n}\n\nGame.prototype.setEmpties = function(twoP, threeP, fourP) {\n  if (this.friendlies.length === 3) {\n    return twoP;\n  } else if (this.friendlies.length === 4) {\n    return threeP;\n  } else {\n    return fourP;\n  }\n}\n\nGame.prototype.sortByMerit = function() {\n  // procedure to sort player order based on merit\n  let friendlySort = [];\n  let highestMerit = 0;\n  let firstFriendlyIndex;\n  let baseIndex;\n  let friendyIndex;\n\n  for (let i = 0; i < this.friendlies.length; i++) {\n    let friendly = this.friendlies[i];\n    // 1. Find the friendly base and set baseIndex to its location.\n    if (friendly === FriendlyBase) {\n      baseIndex = i;\n    // 2. Determine who has the highest merit.\n    } else if (friendly.merit > highestMerit) {\n      highestMerit = friendly.merit;\n      firstFriendlyIndex = i;\n    // 3. If highest merit is tied, return to default order.\n    } else if (friendly.merit === highestMerit) {\n      firstFriendlyIndex = baseIndex;\n    }\n  }\n  // Reorder the friendly list so that the player with highest merit is first\n  // Original turn order is always maintained.\n  if (firstFriendlyIndex > 0) {\n    let firstPlayer = this.friendlies.splice(firstFriendlyIndex, 1);\n    friendlySort.push(firstPlayer[0]);\n    this.friendlies.join();\n    while (this.friendlies.length > 0) {\n      if (firstFriendlyIndex < this.friendlies.length) {\n        let firstPlayer = this.friendlies.splice(firstFriendlyIndex, 1);\n        friendlySort.push(firstPlayer[0]);\n        this.friendlies.join();\n      } else {\n        friendlySort.push(this.friendlies.shift());\n      }\n    }\n    this.friendlies = friendlySort;\n  }\n  // return friendlies;\n}\n\nGame.prototype.addToDeck = function(deck, type, amount) {\n  // procedure that adds cards to a given deck\n  while (amount > 0) {\n    deck.cards.push(type);\n    amount--;\n  }\n  return deck;\n}\n\nGame.prototype.replaceCards = function(amount, deck, active) {\n  // prodecure for replacing active cards\n  let discarding = amount;\n  for (var i = amount; i > 0; i--) {\n    if (active.length > 0) {\n      deck.discard.push(active.pop());\n    }\n  }\n  for (var i = 0; i < amount; i++) {\n    this.checkDeck(deck);\n    active.push(deck.cards.pop());\n    discarding++;\n  }\n}\n\nGame.prototype.distributeEnemies = function(source) {\n  while (source.length > 0) {\n    for (let i = 0; i < this.friendlies.length; i++) {\n      let friendly = this.friendlies[i];\n      if (source.length > 0 && friendly.effects.incinerator) {\n        friendly.pursuers.push(source.pop());\n        console.log(friendly.name + \" incinerates \" + friendly.pursuers[friendly.pursuers.length-1].name);\n        enemyBase.enemyDeck.discard.push(friendly.pursuers.pop());\n        friendly.incinerator = false;\n      } else if (source.length > 0) {\n        friendly.pursuers.push(source.pop());\n      } else {\n        break;\n      }\n    }\n  }\n}\n\nGame.prototype.turns = function() {\n  this.turnNumber = 1;\n  while (true) {\n    // calculate amount of tactical cards left\n    let tacticalCards = 0;\n    for (let i = 0; i < this.friendlies.length; i++) {\n      let player = this.friendlies[i];\n      console.log(this.gameID + \".\" + this.roundNumber + \".\" + this.turnNumber\n                  + \": \" + player.name);\n      if (player === friendlyBase) {\n        continue;\n      } else {\n        tacticalCards += player.hand.length;\n      }\n    }\n    // break loop if there are no tactical cards left\n    if (tacticalCards === 0) {\n      break;\n    }\n    for (let i = 0; i < this.friendlies.length; i++) {\n      let player = this.friendlies[i];\n      if (player === FriendlyBase) {\n        continue;\n      } else {\n        let cardChoiceIndex = $(\"#playerHand\").children().index($(\".selected\"));\n        let cardChoice = player.hand(cardChoiceIndex);\n        // player[cardChoice.cssClass]();  // run the chosen card's function;\n        tacticalDiscard.push(tCard);\n      }\n    }\n    this.turnNumber ++;\n  }\n}\n\n//build enemy base deck\nGame.prototype.buildEnemyBaseDeck = function() {\n  this.addToDeck(enemyBase.enemyBaseDeck, fireLight, 3);\n  this.addToDeck(enemyBase.enemyBaseDeck, fireHeavy, 2);\n  this.addToDeck(enemyBase.enemyBaseDeck, deploy, 2);\n  this.addToDeck(enemyBase.enemyBaseDeck, repair, 3);\n  let deckSize = enemyBase.enemyBaseDeck.cards.length;\n  let subDeckSize = Math.floor(deckSize/this.difficulty);\n  let splitDecks = {};\n  for (let i = 0; i < this.difficulty; i++) {\n    let key = \"d\" + i;\n    if (enemyBase.enemyBaseDeck.cards.length > subDeckSize + 1) {\n      splitDecks[key] = enemyBase.enemyBaseDeck.cards.splice(0, subDeckSize);\n    } else {\n      splitDecks[key] = enemyBase.enemyBaseDeck.cards;\n    }\n  }\n  let deckAssembled = [];\n  for (deck in splitDecks) {\n    splitDecks[deck].push(reinforce);\n    this.shuffle(splitDecks[deck]);\n    while (splitDecks[deck].length > 0) {\n      deckAssembled.push(splitDecks[deck].pop());\n    }\n  }\n  enemyBase.enemyBaseDeck.cards = deckAssembled;\n}\n\nGame.prototype.update = function() {\n  for (let i = 0; i < this.friendlies.length; i++) {\n    let friendly = this.friendlies[i];\n    friendly.updateSummary();\n  }\n  enemyBase.updateSummary();\n}\n\nGame.prototype.round = function() {\n  this.roundNumber++;\n  console.log(\"Round: \" + this.gameID + \".\" + this.roundNumber + \" begin.\");\n  // add enemies and advanced tactics into play\n  if (this.roundNumber === 1) {\n    this.replaceCards(enemyBase.startingEnemies, enemyBase.enemyDeck,\n                      enemyBase.enemiesActive);\n    this.replaceCards(FriendlyBase.marketSize, FriendlyBase.advTactics,\n                      FriendlyBase.market);\n  } else {\n    let newEnemies = enemyBase.enemiesPerTurn;\n    if (enemyBase.effects.intercepted === true) {\n      newEnemies -= 1;\n      enemyBase.effects.intercepted = false;\n    }\n    for (let i = 0; i < newEnemies; i++) {\n      enemyBase.addEnemy();\n    }\n    if (enemyBase.effects.deploy === true) {\n      enemyBase.addEnemy();\n      enemyBase.effects.deploy = false;\n    }\n    FriendlyBase.addAdvTactic();\n  }\n\n  this.sortByMerit();\n\n  this.distributeEnemies(enemyBase.enemiesActive);\n  for (let i = 0; i < this.friendlies.length; i++) {\n    let friendly = this.friendlies[i];\n    friendly.adjustPursuerDamage();\n  }\n\n  // replace tactical cards from last turn\n  this.friendlies.forEach( function(player) {\n    if (player === FriendlyBase) {\n      return;\n    } else {\n      player.resetCardsUsed();\n      game.replaceCards(player.tacticalCardsPerTurn,\n                        game.tacticalDeck, player.hand);\n    }\n  });\n  // refresh play area\n}\n\nGame.prototype.postRound = function() { //strange behavior removing placeholders\n  console.log(\"Round: \" + this.gameID + \".\" + this.roundNumber + \" end.\");\n\n  // discard empty space cards and remove place holders\n  for (let i = 0; i < this.friendlies.length; i++) {\n    let friendly = this.friendlies[i];\n    for (let x = 0; x < friendly.pursuers.length; x++) {\n      let enemy = friendly.pursuers[x];\n      if (enemy === placeHolder) {\n        let removedCard = friendly.pursuers.splice(x, 1);\n        friendly.pursuers.join();\n        let removedTracker = friendly.pursuerDamage.splice(x, 1);\n        friendly.pursuerDamage.join();\n      } else if (enemy === empty) {\n        this.moveCard(x, friendly.pursuers, enemyBase.enemyDeck.discard);\n        let removedTracker = friendly.pursuerDamage.splice(x, 1);\n        friendly.pursuerDamage.join();\n      }\n    }\n  }\n\n  // deal pursuer damage to friendlies, handle cases for damage negation\n  for (let i = 0; i < this.friendlies.length; i++) {\n    let friendly = this.friendlies[i];\n    let damage = 0;\n    for (let x = 0; x < friendly.pursuers.length; x++) {\n      let enemy = friendly.pursuers[x];\n      damage += enemy.power;\n    }\n    friendly.takeDamage(friendly.checkDamageNegation(damage));\n  }\n  // replace the active enemy base card & run the new card's function\n  enemyBase.replaceEnemyBaseCard();\n  enemyBase.updateSummary();\n}\n\nGame.prototype.newRound = function() {\n  this.postRound();\n  this.round();\n}\n\n//temporarily declared as var for safari\nvar game = new Game();\n","let typeWord = function($location, text, element, begEnd, interval, cursor) {\n  if (element === undefined) {\n    element = \"p\";\n  }\n  if (begEnd === undefined) {\n    begEnd = \"prepend\";\n  }\n  if (interval === undefined) {\n    interval = 40;\n  }\n  if (cursor === undefined) {\n    cursor = \"|\";\n  }\n  let newText = document.createElement(element);\n  if (begEnd === \"prepend\") {\n    $location.prepend(newText);\n  } else {\n    $location.append(newText);\n  }\n  let i=0;\n  let testInterval = setInterval(typeOut, interval);\n  function typeOut() {\n    if (i === text.length+1) {\n      clearInterval(testInterval);\n    } else {\n      if (i === 0) {\n        newText.textContent += text[i] + cursor;\n        i++;\n      } else if (i === text.length) {\n        newText.textContent = newText.textContent.slice(0, -1);\n        i++;\n      } else {\n        newText.textContent = newText.textContent.slice(0, -1);\n        newText.textContent += text[i] + cursor;\n        i++;\n      }\n    }\n  }\n}\n\nlet gameName = \"Starfire\";\nlet sessionName;\nlet validSession = \"test1\";\nlet $setup = $(\"<div>\", {id: \"setup\"});\nlet $server = $(\"<ul>\", {id: \"server\"});\nlet $newSessionNameInput = $(\"<input>\", {type: \"text\", id: \"newSessionName\"});\nlet $joinSessionNameInput = $(\"<input>\", {type: \"text\", id: \"joinSessionName\"});\nlet $play = $(\"<button>\", {id: \"play\", text: \"Play\"});\nlet $createGameName = $(\"<button>\", {id: \"createGameName\", text: \"Create\"});\nlet $enterGameName = $(\"<button>\", {id: \"enterGameName\", text: \"Enter\"});\nlet $newGame = $(\"<button>\", {id: \"newGame\", text: \"Create\"});\nlet $joinGame = $(\"<button>\", {id: \"joinGame\", text: \"Join\"});\nlet $notActive = $(\"<p>\", {id: \"notActive\", text: \"Not an active session\"})\n\nlet $greet = $(\"<div>\", {id: \"greet\"});\nlet $startGame = $(\"<div>\", {id: \"startGame\"});\nlet $newSession = $(\"<div>\", {id: \"setup\"});\nlet $joinSession = $(\"<div>\", {id: \"joinSession\"});\nlet $playArea = $(\"#playArea\");\n\n$playArea.hide();\n$(\"#menu\").prepend($setup);\n$setup.append($greet);\n// $setup.append(\"<h3> Welcome to \" + gameName + \"<h3>\");\ntypeWord($greet, \"Welcome to \" + gameName, \"h3\");\n$greet.append($play);\n$setup.append($server);\n// $startGame.append(\"<h3>Create a new game or join an existing one?</h3>\");\n$startGame.append($newGame);\n$startGame.append($joinGame);\n// $newSession.append(\"<h3>Please enter a name for your session.</h3>\");\n$newSession.append($newSessionNameInput);\n$newSession.append($createGameName);\n// $joinSession.append(\"<h3>Please enter the name of the session you would like to join</h3>\");\n$joinSession.append($joinSessionNameInput);\n$joinSession.append($enterGameName);\n$joinSession.append($notActive);\n$notActive.hide();\n\n$play.on(\"click\", function() {\n  $greet.hide();\n  $setup.append($startGame);\n  $startGame.hide();\n  $startGame.fadeIn();\n  typeWord($startGame, \"Create a new game or join an existing one?\", \"h3\");\n});\n\n$newGame.on(\"click\", function() {\n  $startGame.hide();\n  $setup.append($newSession);\n  $newSession.hide();\n  $newSession.fadeIn();\n  typeWord($newSession, \"Please enter a name for your session.\", \"h3\");\n});\n\n$joinGame.on(\"click\", function() {\n  $startGame.hide();\n  $setup.append($joinSession);\n  $joinSession.hide();\n  $joinSession.fadeIn();\n  typeWord($joinSession, \"Please enter the name of the session you would like to join\", \"h3\");\n  $(\"#notActive\").hide();\n});\n\n$newSessionNameInput.on(\"keyup change\", function() {\n  sessionName = $(this).val();\n});\n$joinSessionNameInput.on(\"keyup change\", function() {\n  $notActive.hide();\n  sessionName = $(this).val();\n});\n\n$createGameName.on(\"click\", function() {\n  if (sessionName) {\n    $newSession.hide();\n    $(\"#title\").hide();\n    $(\"#info\").hide();\n    $playArea.fadeIn();\n    $.post(\"/\", \"start\");\n  }\n});\n\n$enterGameName.click(function() {\n  if (sessionName === validSession) {\n    $joinSession.hide();\n    $(\"#title\").hide();\n    $(\"#info\").hide();\n    $playArea.fadeIn();\n  } else {\n    $notActive.fadeIn(400, function() {\n      $notActive.fadeOut(300, function() {\n        $notActive.fadeIn(400)\n      })\n    })\n  }\n});\n\n\n//Quick start\n// $(\"#playArea\").hide();\n// $(\"#title\").hide();\n// $(\"#info\").hide();\n// $(\"#playArea\").fadeIn();\n","// globals changed throughout the game by player events, passed to back-end code\nlet action;\nlet buttonPressed;\n\n// lightbox to display \"market\" cards\nlet $overlay = $(\"<div>\", {\n  id: \"overlay\"\n});\n$(\"body\").append($overlay);\n$overlay.hide();\n\n//establish buttons for card use\nlet $buttons = $(\"#buttons\");\nlet $useButton = $(\"<button>\", {\n  id: \"use\",\n  title: \"Use the selected card\",\n  text: \"USE\"\n});\nlet $discardButton = $(\"<button>\", {\n  id: \"discard\",\n  title: \"Discard the selected card\",\n  text: \"DSC\"\n});\nlet $cancelButton = $(\"<button>\", {\n  id: \"cancel\",\n  title: \"Cancel this action\",\n  text: \"ESC\"\n});\nlet $fireButton = $(\"<button>\", {\n  id: \"fire\",\n  title: \"Fire at a valid target\",\n  text: \"ATK\"\n});\nlet $evadeButton = $(\"<button>\", {\n  id: \"Evade\",\n  title: \"Attempt to evade a pursuer\",\n  text: \"EVD\"\n});\nlet $cicButton = $(\"<button>\", {\n  id: \"cic\",\n  title: \"View advanced tactics\",\n  text: \"CIC\"\n});\nlet $confirmTargetButton = $(\"<button>\", {\n  id: \"confirmTarget\",\n  title: \"Confirm target\",\n  text: \"CFM\"\n});\nlet $confirmAdvButton = $(\"<button>\", {\n  id: \"confirmAdvTactic\",\n  title: \"Confirm choice\",\n  text: \"CFM\"\n});\n\n$buttons.append($useButton);\n$buttons.append($discardButton);\n$buttons.append($fireButton);\n$buttons.append($evadeButton);\n$buttons.append($cicButton);\n$buttons.append($confirmTargetButton);\n$buttons.append($confirmAdvButton);\n$buttons.append($cancelButton);\n\n\n\n/********************\nUPDATE FUNCTIONS\n********************/\n\nconst clearButtons = function() {\n  //clear all action buttons\n  $buttons.children().hide();\n}\n\n\n\nconst updateSummaries = function() {\n  $(\"#enemyBase\").html(enemyBase.summary);\n  let wingman = 1;\n  const showSummary = function(player) {\n    // show player summary\n    let summaryField;\n    if (player.id === user.id) {\n      summaryField = \"#userSummary\";\n    } else {\n      summaryField = \"#wingman\" + wingman + \"-summary\";\n    }\n    let $summary = $(summaryField);\n    $summary.html(player.summary).removeClass().addClass(\"playerSummary\").addClass(player.id);\n  }\n  for (let i = 0; i < game.friendlies.length; i++) {\n    let friendly = game.friendlies[i];\n    if (friendly.id === FriendlyBase.id) {\n      $(\"#FriendlyBase\").html(FriendlyBase.summary);\n    } else if (friendly.id === user.id) {\n      showSummary(friendly)\n    } else {\n      showSummary(friendly);\n      wingman++\n    }\n  }\n}\n\n\nconst updateTacticalCards = function() {\n  // update and show all tactical hands\n  let wingman = 1;\n  for (let i = 0; i < game.friendlies.length; i++) {\n    let $wingmanHand = $(\"#wingman\" + wingman + \"-hand\");\n    let player = game.friendlies[i];\n    if (player.id === \"FriendlyBase\") {\n      continue;\n    } else if (player.id === user.id) {\n      $(\"#playerHand\").empty();\n      for (let i = 0; i < player.hand.length; i++) {\n        let tCard = player.hand[i];\n        $(\"#playerHand\").append(\"<li class='tactical \" + tCard.cssClass + \"'>\"\n                  + \"<h3>\" + tCard.name + \"</h3>\"\n                  + \"<p>\" + tCard.description + \"</p>\"\n                  + \"</li>\");\n      }\n    } else {\n      $wingmanHand.empty();\n      for (let i = 0; i < player.hand.length; i++) {\n        let tCard = player.hand[i];\n        if (tCard) {\n          $wingmanHand.append(\"<li class='tactical \" + tCard.cssClass + \"'>\"\n                    + \"<h3>\" + tCard.name + \"</h3>\"\n                    + \"<p>\" + tCard.description + \"</p>\"\n                    + \"</li>\");\n        }\n      }\n      wingman += 1\n    }\n  }\n}\n\n\nconst updateEnemyCards = function() {\n  // update and show current pursuers\n  const refreshPursuerList = function(location, friendly) {\n    location.empty();\n    location.removeClass();\n    location.addClass(friendly.id);\n    for (let i = 0; i < friendly.pursuers.length; i++) {\n      let eCard = friendly.pursuers[i];\n      if (eCard.cssClass === \"emptySpace\" || eCard.cssClass === \"destroyed\") {\n        location.append(\"<li class='enemy \" + eCard.cssClass + \"'>\"\n                  + \"<h3>\" + eCard.name + \"</h3>\"\n                  + \"</li>\")\n      } else {\n        location.append(\"<li class='enemy \" + eCard.cssClass + \"'>\"\n                + \"<h3>\" + eCard.name + \"</h3>\"\n                + \"<p>ARM: \" + (eCard.armor - friendly.pursuerDamage[i])\n                + \"/\" + eCard.armor + \"</p>\"\n                + \"<p>PWR: \" + eCard.power + \"</p>\"\n                + \"<p>TGT: \" + eCard.targeting + \"</p>\"\n                + \"<p>MRT: \" + eCard.merit + \"</p>\"\n                + \"</li>\")\n      }\n    }\n  }\n  let wingman = 1;\n  const $playerPursuers = $(\"#playerPursuers\");\n  const $basePursuers = $(\"#basePursuers\");\n  for(let i=0; i<game.friendlies.length; i++) {\n    let friendly = game.friendlies[i];\n    if (friendly.id === FriendlyBase.id) {\n      refreshPursuerList($basePursuers, friendly);\n    } else if (friendly.id === user.id) {\n      refreshPursuerList($playerPursuers, friendly);\n    } else {\n      let $wingmanPursuers = $(\"#wingman\" + wingman + \"-pursuers\");\n      refreshPursuerList($wingmanPursuers, friendly);\n      wingman++;\n    }\n  }\n}\n\nconst clearOverlay = function() {\n  $overlay.slideUp(400, function() {\n    $(\"#userSummary\").removeClass(\"bumped\");\n  });\n}\n\nconst update = function() {\n  // update entire play area\n  clearButtons();\n  detarget();\n  updateEnemyCards();\n  updateTacticalCards();\n  updateSummaries();\n  enableSelect();\n}\n\n\n\n/********************\nCARD SELECTION\n********************/\n\n\nconst deselect = function() {\n  // remove \"selected\" class from all cards when a card is clicked\n  $(\".selected\").removeClass(\"selected\");\n}\n\n\nconst detarget = function() {\n  $(\".target\").removeClass(\"target\");\n  $(\".enemy\").off(\"click\");\n  $(\".assist\").removeClass(\"assist\");\n  $(\".playerSummary\").off(\"click\");\n  $(\".friendlyBase\").off(\"click\");\n  $(\".invalidTarget\").removeClass(\"invalidTarget\");\n  $(\".targeted\").removeClass(\"targeted\");\n}\n\n\nconst getCardFunction = function(className) {\n  let card = document.querySelector(className);\n  return card.classList()[1]; // classlist will be .tactical .[action] ...\n}\n\n\nconst getFriendly = function(className) {\n  // determine which Friendly holds the selected card\n  let $card = $(className);\n  let friendly = undefined;\n  if ($card) {\n    $friendly = $card.parent();\n  }\n  if ($card.hasClass(\"Player1\") || $friendly.hasClass(\"Player1\")) {\n    return Player1;\n  } else if ($card.hasClass(\"Player2\") || $friendly.hasClass(\"Player2\")) {\n    return Player2;\n  } else if ($card.hasClass(\"Player3\") || $friendly.hasClass(\"Player3\")) {\n    return Player3;\n  } else if ($card.hasClass(\"Player4\") || $friendly.hasClass(\"Player4\")) {\n    return Player4;\n  } else if ($card.hasClass(\"FriendlyBase\") || $friendly.hasClass(\"FriendlyBase\")) {\n    return FriendlyBase;\n  } else if ($card.attr(\"id\") === \"enemyBase\") {\n    return enemyBase;\n  } else {\n    return undefined;\n  }\n}\n\n\n\n/********************\nCARD BINDING\n********************/\n\n\nconst enableSelect = function() {\n  $(\".disabled\").removeClass(\"disabled\");\n  $(\".tactical\").on(\"click\", function() {\n    deselect();\n    $(this).addClass(\"selected\");\n    let $selected = $(\".selected\");\n    if ($selected.hasClass(\"feint\")) {\n      if (user.lastCardUsed) {\n        $selected.html(\"<h3>Feint</h3><p>\" + user.lastCardUsed.description + \"</p>\");\n        $useButton.show();\n      } else {\n        $useButton.hide();\n        $selected.html(\"<h3>Feint</h3><p>Nothing to feint</p>\");\n      }\n    } else {\n      $useButton.show();\n    }\n    $discardButton.show();\n  });\n}\n\n\nconst disableSelect = function() {\n  //disable clicking other cards while an action is being taken\n  $(\".tactical\").not(\".selected\").addClass(\"disabled\");\n  $(\".tactical\").off(\"click\");\n}\n\n\nconst selectAlly = function(scope) {\n  if (scope === \"all\") {\n    $(\".playerSummary\").addClass(\"assist\");\n  } else {\n    $(\".playerSummary\").not($(\".\" + user.id)).addClass(\"assist\");\n  }\n  $(\"#FriendlyBase\").addClass(\"assist\");\n  $(\".assist\").on(\"click\", function() {\n    detarget();\n    clearButtons();\n    $(this).toggleClass(\"targeted\");\n    $confirmTargetButton.show();\n    $cancelButton.show();\n  });\n}\n\nconst getPlayer = function() { // for local playable version only\n  let $summary = $(\".selected\").parent().next();\n  if ($summary.hasClass(\"Player1\")) {\n    return Player1;\n  } else if ($summary.hasClass(\"Player2\")) {\n    return Player2;\n  } else if ($summary.hasClass(\"Player3\")) {\n    return Player3;\n  } else if ($summary.hasClass(\"Player1\")) {\n    return Player4;\n  } else {\n    return user;\n  }\n}\n\nconst showTargets = function(action) {\n  let player = getPlayer();\n  const selectTargets = function(...ids) {\n    let enemies = Array.from($(\".enemy\"));\n    enemies.forEach((enemy) => {\n      let classes = Array.from(enemy.classList);\n      if (ids.includes(enemy.id) ||\n        (ids.includes(enemy.parentElement.id) && !classes.includes(\"emptySpace\")\n            && !classes.includes(\"destroyed\"))) {\n        enemy.className += \" target\";\n        $(\".target\").on(\"click\", function() {\n          clearButtons();\n          $(this).addClass(\"targeted\")\n          $(\".targeted\").not($(this)).removeClass(\"targeted\");\n          $confirmTargetButton.show();\n          $cancelButton.show();\n        });\n      } else {\n        enemy.className += \" invalidTarget\";\n      }\n    });\n  }\n  if (action === \"feint\") {\n    action = player.lastCardUsed.cssClass;\n  }\n  // SERVER VERSION SELECTION LOGIC, DISABLED FOR LOCAL VERSION\n  // if ([\"fire\", \"missile\", \"heatSeeker\", \"bomb\", \"scatterShot\"].includes(action)) {\n  //   if (player.effects.status == \"Free\") {\n  //     selectTargets(\"basePursuers\", \"wingman1-pursuers\", \"wingman2-pursuers\", \"wingman3-pursuers\",\n  //       \"enemyBase\");\n  //   } else {\n  //     selectTargets(\"basePursuers\", \"wingman1-pursuers\", \"wingman2-pursuers\", \"wingman3-pursuers\");\n  //   }\n  // }\n  // if ([\"snapshot\"].includes(action)) {\n  //   selectTargets(\"basePursuers\", \"playerPursuers\", \"wingman1-pursuers\", \"wingman2-pursuers\", \"wingman3-pursuers\",\n  //     \"enemyBase\");\n  // }\n  // if ([\"drawFire\", \"emp\"].includes(action)) {\n  //   selectTargets(\"basePursuers\", \"wingman1-pursuers\", \"wingman2-pursuers\", \"wingman3-pursuers\");\n  // }\n  // if ([\"immelman\", \"evade\", \"barrelRoll\"].includes(action)) {\n  //   selectTargets(\"playerPursuers\");\n  // }\n  if ([\"repairDrone\"].includes(action)) {\n    selectAlly(\"all\");\n  } else { // for local playable version only\n    selectTargets(\"playerPursuers\", \"basePursuers\", \"wingman1-pursuers\", \"wingman2-pursuers\", \"wingman3-pursuers\",\n      \"enemyBase\")\n  }\n}\n\n\n\n/********************\nBUTTON FUNCTIONS\n********************/\n\n\n$useButton.on(\"click\", function() {\n  clearButtons();\n  buttonPressed = \"use\";\n  $cancelButton.show();\n  disableSelect();\n  action = $(\".selected\")[0].classList[1];\n  showTargets(action);\n});\n\n\n$discardButton.on(\"click\", function() {\n  clearButtons();\n  buttonPressed = \"discard\";\n  $fireButton.show();\n  $evadeButton.show();\n  $cicButton.show();\n  $cancelButton.show();\n  disableSelect();\n});\n\n\n$fireButton.on(\"click\", function() {\n  clearButtons();\n  $cancelButton.show();\n  disableSelect();\n  action = \"fire\";\n  buttonPressed = \"fire\";\n  showTargets(action);\n});\n\n$evadeButton.on(\"click\", function() {\n  clearButtons();\n  $cancelButton.show();\n  disableSelect();\n  action = \"evade\";\n  buttonPressed = \"evade\";\n  showTargets(action);\n});\n\nconst cancel = function() {\n  clearOverlay();\n  clearButtons();\n  deselect();\n  detarget();\n  action = \"\";\n  enableSelect();\n}\n\n$cancelButton.on(\"click\", cancel);\n\n$(document).keyup(function(e) {\n  if (e.keyCode == 27) {\n    cancel();\n  }\n})\n\n$cicButton.on(\"click\", function() {\n  action = \"useAdvTactic\";\n  buttonPressed = \"useAdvTactic\";\n  $(\"#userSummary\").addClass(\"bumped\");\n  clearButtons();\n  $cancelButton.show();\n  $overlay.empty();\n  let $marketList = $(\"<ul>\");\n  $overlay.append(typeWord($overlay[0], \"Incoming transmition from \" + game.name + \" command...\", \"p\", undefined, 30));\n  $overlay.append($marketList);\n  FriendlyBase.market.forEach( function(card) {\n    let advCard;\n    if (player.merit >= card.cost) {\n      advCard = \"<li class='advTactical \" + card.cssClass + \" purchasable'>\"\n              + \"<h3>\" + card.name + \"</h3>\"\n              + \"<p>\" + card.description + \"</p>\"\n              + \"<p class='cost'> Merit cost: \" + card.cost + \"</p>\"\n              + \"</li>\";\n    } else {\n      advCard = \"<li class='advTactical \" + card.cssClass + \" unavailable'>\"\n              + \"<h3>\" + card.name + \"</h3>\"\n              + \"<p>\" + card.description + \"</p>\"\n              + \"<p class='cost'> Merit cost: \" + card.cost + \"</p>\"\n              + \"</li>\";\n    }\n    $marketList.append(advCard);\n  });\n  $overlay.slideDown(600);\n  $marketList.hide().fadeIn(1000);\n  $(\".purchasable\").on(\"click\", function() {\n      clearButtons();\n      $cancelButton.show();\n      detarget();\n      $(this).siblings().removeClass(\"purchasing\");\n      $(this).addClass(\"purchasing\");\n      action = $(this)[0].classList[1]; // $(this).attr(\"class\").split(\" \")[1]\n      if([\"heatSeeker\", \"bomb\", \"scatterShot\", \"snapshot\", \"emp\", \"repairDrone\"].includes(action)) {\n        $confirmAdvButton.hide();\n        showTargets(action);\n      } else {\n        detarget();\n        $confirmAdvButton.show();\n      }\n  });\n});\n\nconst sendPacket = function() { //for server version: modify to send packet to server\n  let turnInfo = {\n    player: getPlayer(),\n    button: buttonPressed,\n    cardIndex: $(\".selected\").index(),\n    friendly: getFriendly(\".targeted\"),\n    pursuerIndex: $(\".targeted\").index(),\n    purchaseIndex: $(\".purchasing\").index(),\n  }\n  // SERVER VERSION\n  console.log(\"Sending packet to server\");\n  console.dir(turnInfo);\n  sock.emit(\"turn\", JSON.stringify(turnInfo));\n\n  clearOverlay();\n  detarget();\n  clearButtons();\n  update();\n}\n\n\n$confirmTargetButton.on(\"click\", function() {\n  sendPacket();\n});\n\n$confirmAdvButton.on(\"click\", function() {\n  sendPacket();\n});\n","let user = Player1;\ngame.round();\nupdate();\n"]}