{"version":3,"sources":["_tactical.js","_deck.js","_enemies.js","_friendlies.js","_game.js","_build.js","_server.js","_gamelogic.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3rBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7afile":"app.js","sourcesContent":["const Tactical = function(name, cssClass, description) {\n  this.name = name;\n  this.cssClass = cssClass;\n  this.description = description;\n  this.type = \"basic\";\n  this.card = \"<li class='tactical \" + this.cssClass + \"'>\"\n            + \"<h3>\" + this.name + \"</h3>\"\n            + \"<p>\" + this.description + \"</p>\"\n            + \"</li>\";\n}\n\nconst AdvTactical = function(name, cssClass, description, cost) {\n  Tactical.call(this, name, cssClass, description);\n  this.cost = cost;\n  this.type = \"advanced\";\n  this.card = \"<li class='advTactical \" + this.cssClass + \"'>\"\n              + \"<h3>\" + this.name + \"</h3>\"\n              + \"<p>\" + this.description + \"</p>\"\n              + \"<p class='cost'>Merit cost: \" + this.cost + \"</p>\"\n              + \"</li>\"\n}\nAdvTactical.prototype = Object.create(Tactical.prototype);\n\nAdvTactical.prototype.generateCard = function(player) {\n  if (player.merit >= this.cost) {\n    return \"<li class='advTactical \" + this.cssClass + \" purchasable'>\"\n            + \"<h3>\" + this.name + \"</h3>\"\n            + \"<p>\" + this.description + \"</p>\"\n            + \"<p class='cost'> Merit cost: \" + this.cost + \"</p>\"\n            + \"</li>\";\n  } else {\n    return \"<li class='advTactical \" + this.cssClass + \" unavailable'>\"\n            + \"<h3>\" + this.name + \"</h3>\"\n            + \"<p>\" + this.description + \"</p>\"\n            + \"<p class='cost'> Merit cost: \" + this.cost + \"</p>\"\n            + \"</li>\";\n  }\n}\n","const Deck = function(name) {\n  this.name = name;\n  this.cards = [];\n  this.discard = [];\n  this.shuffles = 0;\n}\n","const EnemyBase = function() {\n  this.id = \"enemyBase\";\n  this.name = \"Enemy Base\";\n  this.maxArmor = 30;\n  this.currentArmor = 30;\n  this.effects = {\n    jammed: false,\n    intercepted: false,\n    deploy: false\n  }\n  this.summary = \"<h3>\" + this.name + \"</h3>\"\n          + \"<p>Armor: \" + this.currentArmor + \"/\" + this.maxArmor + \"</p>\"\n}\n\nEnemyBase.prototype.updateSummary = function(game) {\n  this.summary = \"<h3>\" + this.name + \"</h3>\"\n               + \"<p>Armor: \" + this.currentArmor + \"/\"\n                               + this.maxArmor + \"</p>\"\n               + \"<p>Launch rate: \" + game.enemiesPerTurn + \"</p>\";\n  if (game.currentEnemyBaseCard.length === 0 && game.roundNumber > 1) {\n    this.summary += \"<div class='enemyBaseCard'><h3>Jammed</h3></div>\";\n  } else if (game.roundNumber > 1) {\n    this.summary += game.currentEnemyBaseCard[0].card;\n  }\n}\n\nEnemyBase.prototype.takeDamage = function(game, damage) {\n  this.currentArmor -= damage;\n  if (this.currentArmor < 0) {\n    this.currentArmor = 0;\n  }\n  if (this.currentArmor === 0) {\n    io.to(game.gameID).emit(\"msg\", this.name + \" destroyed! Players win.\");\n    game.win = true;\n  }\n  this.updateSummary(game);\n}\n\n\n/************************\nENEMY BASE CARD FUNCTIONS\n*************************/\n\nEnemyBase.prototype.reinforce = function(game) {\n  io.to(game.gameID).emit(\"msg\", this.name + \" will launch one extra enemy card into play each round.\");\n  game.enemiesPerTurn += 1;\n}\n\nEnemyBase.prototype.repair = function(game) {\n  this.currentArmor += 5;\n  if (this.currentArmor > this.maxArmor) {\n    this.currentArmor = this.maxArmor;\n  }\n  io.to(game.gameID).emit(\"msg\", this.name + \" Repairs 5 damage. Current armor: \"\n              + this.currentArmor + \"/\" + this.maxArmor);\n}\n\nEnemyBase.prototype.fireHeavy = function(game) {\n  io.to(game.gameID).emit(\"msg\", this.name + \" fires heavy weapons.\");\n  game.friendlies[game.findFriendlyBase()].takeDamage(5);\n}\n\nEnemyBase.prototype.fireLight = function(game) {\n  io.to(game.gameID).emit(\"msg\", this.name + \" fires light weapons.\");\n  game.friendlies[game.findFriendlyBase()].takeDamage(3);\n}\n\nEnemyBase.prototype.deploy = function(game) {\n  io.to(game.gameID).emit(\"msg\", this.name + \" launches an extra fighter.\");\n  this.effects.deploy = true;\n}\n\nconst Enemy = function(name, cssClass, armor, power, targeting, merit) {\n  this.name = name;\n  this.cssClass = cssClass;\n  this.armor = armor;\n  this.currentArmor = this.armor;\n  this.power = power;\n  this.targeting = targeting;\n  this.merit = merit;\n  if (this.cssClass === \"emptySpace\" || this.cssClass === \"destroyed\") {\n    this.card = \"<li class='enemy \" + this.cssClass + \"'>\";\n              + \"<h3>\" + this.name + \"</h3>\"\n              + \"</li>\";\n  } else {\n    this.card = \"<li class='enemy \" + this.cssClass + \"'>\"\n            + \"<h3>\" + this.name + \"</h3>\"\n            + \"<p>ARM: \" + this.currentArmor + \"/\" + this.armor + \"</p>\"\n            + \"<p>PWR: \" + this.power + \"</p>\"\n            + \"<p>TGT: \" + this.targeting + \"</p>\"\n            + \"<p>MRT: \" + this.merit + \"</p>\"\n            + \"</li>\";\n  }\n}\n\nEnemy.prototype.takeDamage = function(damage) {\n  this.currentArmor -= damage;\n  if (this.currentArmor < 0) {\n    this.currentArmor = 0;\n  }\n  this.updateCard();\n}\n\nEnemy.prototype.resetArmor = function() {\n  this.currentArmor = this.armor;\n}\n\nconst EnemyBaseCard = function(name, cssClass, description) {\n  this.name = name;\n  this.cssClass = cssClass;\n  this.description = description;\n  this.card = \"<p id='enemyBaseCard'>Last action: \" + this.description + \"</p>\";\n}\n","/**************************\nFRIENDLY BASE CONSTRUCTOR\n**************************/\n\nconst Friendly = function(id, name, maxArmor) {\n  this.id = id;\n  this.name = name;\n  this.maxArmor = maxArmor;\n  this.pursuers = [];\n  this.pursuerDamage = [];\n  this.effects = {\n    dead: false,\n    emp: false,\n    countermeasures: false,\n    divertShields: 0,\n    status: \"Pursued\"\n  };\n  this.currentArmor = maxArmor;\n  this.summary = \"<h3>\" + this.name + \"</h3>\"\n            + \"<p>Armor: \" + this.currentArmor + \"/\" + this.maxArmor + \"</p>\"\n            + \"<p class='pursued'>\" + this.effects.status + \"</p>\";\n}\n\n\n\n/**************************\nFRIENDLY BASE UTILITY METHODS\n**************************/\n\nFriendly.prototype.adjustPursuerDamage = function() {\n  while (this.pursuerDamage.length < this.pursuers.length) {\n    this.pursuerDamage.push(0);\n  }\n  while (this.pursuerDamage.length > this.pursuers.length) {\n    this.pursuerDamage.pop();\n  }\n}\n\nFriendly.prototype.updateSummary = function() {\n  this.effects.status = \"Free\";\n  this.summary = \"<h3>\" + this.name + \"</h3>\"\n            + \"<p>Armor: \" + this.currentArmor + \"/\" + this.maxArmor + \"</p>\";\n  for (let i=0; i<this.pursuers.length; i++) {\n    let enemy = this.pursuers[i];\n    if (enemy.merit > 0) {\n      this.effects.status = \"Pursued\";\n    }\n  }\n  if (this.effects.status === \"Pursued\") {\n    this.summary += \"<p class='pursued'>\" + this.effects.status + \"</p>\";\n  } else {\n    this.summary += \"<p class='free'>\" + this.effects.status + \"</p>\";\n  }\n}\n\nFriendly.prototype.checkShields = function(game, damage) {\n  if (this.effects.divertShields > 0) {\n    let difference = this.effects.divertShields - damage;\n    if (difference > 0) {\n      this.effects.divertShields -= damage;\n      damage = 0;\n    } else if (difference < 0) {\n      damage -= this.effects.divertShields;\n      this.effects.divertShields = 0;\n    } else {\n      damage = 0;\n      this.effects.divertShields = 0;\n    }\n    io.to(game.gameID).emit(\"msg\", this.name + \"'s shields reduce damage to \"\n                + damage);\n  }\n  return damage;\n}\n\nFriendly.prototype.checkDamageNegation = function(game, damage) {\n  if (this.effects.emp) {\n    io.to(game.gameID).emit(\"msg\", this.name + \" is protected by EMP.\");\n    this.effects.emp = false;\n    return 0;\n  } else {\n    return damage;\n  }\n}\n\nFriendly.prototype.takeDamage = function(game, damage) {\n  if (damage > 0) {\n    this.currentArmor -= damage;\n    if (this.currentArmor <= 0) {\n      this.currentArmor = 0;\n      io.to(game.gameID).emit(\"msg\", this.name + \" has been destroyed. Players lose.\");\n      this.effects.dead = true;\n      game.lose = true;\n      console.log('Loss condition met: Friendly Base destroyed');\n    } else {\n      io.to(game.gameID).emit(\"msg\", this.name + \" takes \" + damage + \" damage. Current armor: \"\n                  + this.currentArmor + \"/\" + this.maxArmor);\n    }\n  }\n}\n\nFriendly.prototype.insertPlaceholder = function(index) {\n  //removes an enemy card from the fray and inserts a \"destroyed\" place holder\n  this.pursuers.splice(index, 0, placeHolder);\n  this.pursuers.join();\n  this.adjustPursuerDamage();\n}\n\n\n\n/**************************\nPLAYER CONSTRUCTOR\n**************************/\n\nconst Player = function(id, name) {\n  this.id = id;\n  this.name = name;\n  this.maxArmor = 10;\n  this.currentArmor = this.maxArmor;\n  this.tacticalCardsPerTurn = 3;\n  this.lastCardUsed = null;\n  this.hand = [];\n  this.pursuers = [];\n  this.pursuerDamage = [];\n  this.merit = 0;\n  this.combatDie = [0,0,0,1,1,2];\n  this.improvedDie = [0,0,1,1,1,2];\n  this.missileDie = [0,0,1,1,2,2];\n  this.amtImproved = 0;\n  this.effects = {\n    dead: false,\n    medalOfHonor: false,\n    medic: false,\n    daredevil: false,\n    deadeye: false,\n    heavyArmor: false,\n    negotiator: false,\n    resourseful: false,\n    strategist: false,\n    lightningReflexes: false,\n    commsExpert: false,\n    emp: false,\n    countermeasures: false,\n    divertShields: 0,\n    incinerator: false,\n    status: \"Pursued\"\n  };\n  this.summary = \"<h3>\" + this.name + \"</h3>\"\n                + \"<p>Armor: \" + this.currentArmor + \"/\"\n                + this.maxArmor + \"</p>\"\n                + \"<p>Merit: \" + this.merit + \"</p>\"\n                + \"<p class='pursued'>\" + this.effects.status + \"</p>\";\n}\n\n\n\n/**************************\nPLAYER UTILITY METHODS\n**************************/\n\n\n\nPlayer.prototype.insertPlaceholder = Friendly.prototype.insertPlaceholder;\nPlayer.prototype.checkShields = Friendly.prototype.checkShields;\nPlayer.prototype.adjustPursuerDamage = Friendly.prototype.adjustPursuerDamage;\n\nPlayer.prototype.resetCardsUsed = function() {\n  this.lastCardUsed = null;\n}\n\nPlayer.prototype.updateSummary = function() {\n  this.summary = \"<h3>\" + this.name + \"</h3>\";\n  if (!this.effects.dead) {\n    this.effects.status = \"Free\";\n    this.summary += \"<p>Armor: \" + this.currentArmor\n                  + \"/\" + this.maxArmor + \"</p>\"\n                  + \"<p>Merit: \" + this.merit + \"</p>\";\n    for (let i=0; i<this.pursuers.length; i++) {\n      let enemy = this.pursuers[i];\n      if (enemy.merit > 0) {\n        this.effects.status = \"Pursued\";\n      }\n    }\n  }\n  if (this.effects.status === \"KIA\" || this.effects.status === \"MIA\") {\n    this.summary += \"<p class='pursued'>\" + this.effects.status + \"</p>\";\n  } else {\n    let ability = \"\";\n    if (this.effects.medalOfHonor) {\n      ability = \"Medal of Honor\";\n    } else if (this.effects.medic) {\n      ability = \"Medic\";\n    } else if (this.effects.daredevil) {\n      ability = \"Daredevil\";\n    } else if (this.effects.deadeye) {\n      ability = \"Deadeye\";\n    } else if (this.effects.heavyArmor) {\n      ability = \"Heavy Armor\";\n    } else if (this.effects.negotiator) {\n      ability = \"Negotiator\";\n    } else if (this.effects.resourceful) {\n      ability = \"Resourceful\";\n    } else if (this.effects.strategist) {\n      ability = \"Strategist\";\n    } else if (this.effects.lightningReflexes) {\n      ability = \"Lightning Reflexes\";\n    } else if (this.effects.commsExpert) {\n      ability = \"Comms expert\";\n    }\n    this.summary += \"<p class='free'>\" + ability + \"</p>\";\n  }\n}\n\nPlayer.prototype.setAmtImproved = function() {\n  // set interval for the amount of improved dice\n  this.amtImproved = Math.floor(this.merit/5);\n}\n\nPlayer.prototype.damageRoll = function(list) {\n  // return a random value from a list\n  return list[Math.floor(Math.random() * list.length)];\n}\n\nPlayer.prototype.increaseMerit = function(game, amount) {\n  this.merit += amount;\n  io.to(game.gameID).emit(\"msg\", this.name + \" receives \" + amount + \" merit.\");\n}\n\n// calculate damage // only returning 0\nPlayer.prototype.calcDamage = function(dice) {\n  // roll a combat die x times and add the rolls together\n  let totalRolls = dice;\n  let improvedRolls = this.amtImproved;\n  let normalRolls = totalRolls - improvedRolls;\n  let damage = 0;\n  while (normalRolls > 0) {\n      damage += this.damageRoll(this.combatDie);\n      normalRolls--;\n    }\n  while (improvedRolls > 0) {\n      damage += this.damageRoll(this.improvedDie);\n      improvedRolls--;\n    }\n    return damage;\n}\n\nPlayer.prototype.checkDamageNegation = function(game, damage) {\n  if (damage > 0) {\n    if (this.effects.emp) {\n      io.to(game.gameID).emit(\"msg\", this.name + \" is protected by EMP.\");\n      this.effects.emp = false;\n      return 0;\n    } else {\n      damage = this.checkShields(game, damage);\n      if (this.effects.countermeasures) {\n        let counterDamage = this.calcDamage(4);\n        io.to(game.gameID).emit(\"msg\", this.name + \" deploys countermeasures to avoid \"\n                    + counterDamage + \" damage.\");\n        damage -= counterDamage;\n        this.effects.countermeasures = false;\n      }\n      if (damage < 0) {\n        damage = 0;\n        io.to(game.gameID).emit(\"msg\", \"All damage to \" + this.name + \" negated.\");\n      } else {\n        return damage;\n      }\n    }\n  } else {\n    return damage;\n  }\n}\n\nPlayer.prototype.destroyed = function(game, status) {\n  this.effects.dead = true;\n  this.effects.status = status;\n  while (this.hand.length > 0) {\n    game.moveCard(0, this.hand, game.tacticalDeck.discard);\n  }\n  let pursuers = this.pursuers;\n  this.pursuers = [];\n  let alldead = true;\n  for (let i = 0; i < game.friendlies.length; i++) {\n    let friendly = game.friendlies[i];\n    if (friendly.id === \"FriendlyBase\") {\n      continue;\n    } else {\n      if (!friendly.effects.dead) {\n        alldead = false;\n      }\n    }\n  }\n  if (alldead) {\n    io.to(game.gameID).emit(\"msg\", \"All pilots destroyed. Players lose.\");\n    game.lose = true;\n    console.log('Loss condition met: All pilots destroyed');\n  } else {\n    game.distributeEnemies(pursuers);\n  }\n}\n\nPlayer.prototype.takeDamage = function(game, damage) {\n  if (damage > 0) {\n    this.currentArmor -= damage;\n    if (this.currentArmor <= 0) {\n      this.currentArmor = 0;\n      io.to(game.gameID).emit(\"msg\", this.name + \" takes \" + damage + \" damage. \" + this.name + \" has been destroyed.\");\n    } else {\n      io.to(game.gameID).emit(\"msg\", this.name + \" takes \" + damage + \" damage. Current armor: \"\n                  + this.currentArmor + \"/\" + this.maxArmor);\n    }\n  }\n}\n\nPlayer.prototype.checkKill = function(game, friendly, index) {\n  // if kill: award merit, insert placeholder\n  if (friendly.pursuerDamage[index] >= friendly.pursuers[index].armor) {\n    io.to(game.gameID).emit(\"msg\", friendly.pursuers[index].name + \" pursuing \" + friendly.name\n                + \" destroyed.\")\n    let merit = friendly.pursuers[index].merit;\n    if (this.effects.medalOfHonor === true) {\n      merit += 1;\n    }\n    this.increaseMerit(game, merit);\n    game.moveCard(index, friendly.pursuers, game.enemyDeck.discard);\n    friendly.insertPlaceholder(index);\n  }\n}\n\nPlayer.prototype.doDamage = function(game, friendly, index, damage) {\n  // if damage is more than 0, deal damage to a selected enemy, check for kill\n  // does not allow damage to empty space or place holders\n  if (friendly === undefined) {\n    friendly = this;\n  }\n  if (index === undefined) {\n    index = 0;\n  }\n  if (friendly.id === \"enemyBase\") {\n    if (damage > 0) {\n      game.enemyBase.takeDamage(game, damage);\n      io.to(game.gameID).emit(\"msg\", this.name + \" deals \" + damage + \" damage to enemy base.\");\n      this.increaseMerit(game, 1);\n    } else {\n      io.to(game.gameID).emit(\"msg\", \"No damage to enemy base\");\n    }\n  } else {\n    if (friendly.pursuers[index] && (friendly.pursuers[index].cssClass === \"emptySpace\" // throwing error when attacking fb pursuers: Cannot read property '0' of undefined\n      || friendly.pursuers[index].cssClass === \"destroyed\")) {\n      console.error(\"No enemy at index \" + index);\n    } else {\n      if (damage > 0) {\n        friendly.pursuerDamage[index] += damage;\n        let enemyArmor = friendly.pursuers[index].armor - friendly.pursuerDamage[index];\n        if (enemyArmor < 0) {\n          enemyArmor = 0;\n        }\n        io.to(game.gameID).emit(\"msg\", this.name + \" deals \" + damage + \" damage to \"\n                    + friendly.pursuers[index].name + \" pursuing \"\n                    + friendly.name + \". Current armor: \"\n                    + enemyArmor\n                    + \"/\" + friendly.pursuers[index].armor);\n        this.checkKill(game, friendly, index);\n      } else {\n        io.to(game.gameID).emit(\"msg\", \"No damage to target.\");\n      }\n    }\n  }\n}\n\n\n\n/**************************\nPLAYER TACTICAL FUNCTIONS\n**************************/\n\nPlayer.prototype.fire = function(game, friendly, pursuerIndex) {\n  // deal damage equal to 4 combat dice to target\n  let damage = 0;\n  if (this.deadeye) {\n    damage = this.calcDamage(5);\n  } else {\n    damage = this.calcDamage(4);\n  }\n  this.doDamage(game, friendly, pursuerIndex, damage);\n}\n\nPlayer.prototype.evade = function(game, friendly, pursuerIndex) {\n  if (friendly === undefined) {\n    friendly = this;\n  }\n  // choose a target and attempt evade (D6 vs. enemy targeting)\n  let evadeRoll = Math.floor(Math.random() * 6) + 1;\n  let pursuer = this.pursuers[pursuerIndex];\n  if (evadeRoll >= pursuer.targeting) {\n    io.to(game.gameID).emit(\"msg\", this.name + \" shakes \" + pursuer.name + \" to friendly base.\");\n    game.moveCard(pursuerIndex, this.pursuers, game.friendlies[game.findFriendlyBase()].pursuers);\n    game.moveCard(pursuerIndex, this.pursuerDamage, game.friendlies[game.findFriendlyBase()].pursuerDamage);\n    this.insertPlaceholder(pursuerIndex);\n    game.friendlies[game.findFriendlyBase()].adjustPursuerDamage();\n  } else {\n    io.to(game.gameID).emit(\"msg\", this.name + \" can't shake 'em!\")\n  }\n}\n\nPlayer.prototype.missile = function(game, friendly, pursuerIndex) {\n  // deal damage equal to 5 combat dice to target\n  let damage = 0;\n  if (this.deadeye) {\n    damage = this.calcDamage(5) + this.damageRoll(this.missileDie);\n  } else {\n    damage = this.calcDamage(4) + this.damageRoll(this.missileDie);\n  }\n  this.doDamage(game, friendly, pursuerIndex, damage);\n}\n\nPlayer.prototype.heatSeeker = function(game, friendly, pursuerIndex) {\n  // deal 5 damage to target\n  this.doDamage(game, friendly, pursuerIndex, 5);\n}\n\nPlayer.prototype.bomb = function(game, friendly, pursuerIndex, damage, collateral) {\n  // deal 6 damage to target and 2 damage to each adjacent targeting\n  // if there is no adjacent target, collateral damage is applied to pursued ally\n  // flat 10 damage to enemyBase\n  if (pursuerIndex === undefined) {\n    pursuerIndex = 0;\n  }\n  if (damage === undefined) {\n    damage = 6;\n  }\n  if (collateral === undefined) {\n    collateral = 2;\n  }\n  let friendlyFire = 0;\n  if (friendly.id === \"enemyBase\") {\n    baseDamage = damage+(collateral*2);\n    this.doDamage(game, game.enemyBase, pursuerIndex, baseDamage);\n  } else {\n    let adjacentLeft = pursuerIndex - 1;\n    let adjacentRight = pursuerIndex + 1;\n    while (adjacentLeft >= 0 && friendly.pursuers[adjacentLeft].cssClass === 'destroyed') {\n      adjacentLeft -= 1;\n    }\n    while (adjacentRight < friendly.pursuers.length\n            && friendly.pursuers[adjacentRight].cssClass === 'destroyed') {\n      adjacentRight += 1;\n    }\n    if (adjacentRight < friendly.pursuers.length\n        && friendly.pursuers[adjacentRight].cssClass != 'emptySpace') {\n      this.doDamage(game, friendly, adjacentRight, collateral);\n    } else {\n      friendlyFire += collateral;\n    }\n    this.doDamage(game, friendly, pursuerIndex, damage);\n    if (adjacentLeft > -1 &&\n      friendly.pursuers[adjacentLeft].cssClass != 'emptySpace') {\n        this.doDamage(game, friendly, adjacentLeft, collateral);\n    } else {\n      friendlyFire += collateral;\n    }\n    friendly.takeDamage(game, friendly.checkShields(game, friendlyFire));\n  }\n}\n\nPlayer.prototype.repairDrone = function(game, friendly, index, repairPoints, meritReward) {\n  // repair a selected ally, can choose self, award merit if not self\n  if (index === undefined) {\n    index = 0;\n  }\n  if (repairPoints === undefined) {\n    repairPoints = 3;\n  }\n  if (meritReward === undefined) {\n    meritReward = 2;\n  }\n  if (friendly.currentArmor < friendly.maxArmor) {\n    friendly.currentArmor += repairPoints;\n    if (friendly.currentArmor > friendly.maxArmor) {\n      friendly.currentArmor = friendly.maxArmor;\n    }\n    if (this != friendly) {\n      this.increaseMerit(game, meritReward);\n    }\n    io.to(game.gameID).emit(\"msg\", this.name + \" repairs \" + repairPoints + \" damage on \"\n                + friendly.name + \". Current armor: \"\n                + friendly.currentArmor + \"/\" + friendly.maxArmor)\n  } else {\n    io.to(game.gameID).emit(\"msg\", friendly.name + \" is already at maximum armor.\");\n  }\n}\n\nPlayer.prototype.drawFire = function(game, friendly, index) {\n  // choose an ally's pursuer and bring it to you\n  io.to(game.gameID).emit(\"msg\", friendly.pursuers[index].name + \" moves from \" + friendly.name\n              + \" to \" + this.name + \".\");\n  this.increaseMerit(game, friendly.pursuers[index].merit);\n  game.moveCard(index, friendly.pursuers, this.pursuers);\n  game.moveCard(index, friendly.pursuerDamage, this.pursuerDamage);\n  friendly.insertPlaceholder(index);\n  this.adjustPursuerDamage();\n}\n\nPlayer.prototype.feint = function(game, friendly, pursuerIndex) {\n  // choose a tCard previously used this round and play it again\n  if (this.lastCardUsed) {\n    let card = this.lastCardUsed;\n    let action = this.lastCardUsed.cssClass;\n    io.to(game.gameID).emit(\"msg\", this.name + \" uses feint to play \" + card.name)\n    this[action](game, friendly, pursuerIndex);\n  } else {\n    console.error(\"No action to feint\");\n  }\n}\n\nPlayer.prototype.barrelRoll = function(game, friendly, pursuerIndex) {\n  if (friendly === undefined) {\n    friendly = this;\n  }\n  // move pursuer at pursuerIndex to friendly base\n  io.to(game.gameID).emit(\"msg\", this.name + \" does a barrel roll! \" + this.pursuers[pursuerIndex].name + \" now pursues \"\n              + game.friendlies[game.findFriendlyBase()].name + \".\");\n  game.moveCard(pursuerIndex, this.pursuers, game.friendlies[game.findFriendlyBase()].pursuers);\n  game.moveCard(pursuerIndex, this.pursuerDamage, game.friendlies[game.findFriendlyBase()].pursuerDamage);\n  this.insertPlaceholder(pursuerIndex);\n  game.friendlies[game.findFriendlyBase()].adjustPursuerDamage();\n}\n\nPlayer.prototype.scatterShot = function(game, friendly, pursuerIndex) {\n  // deal a small amount of damage to 3 adjacent targets\n  this.bomb(game, friendly, pursuerIndex, 2, 1)\n}\n\nPlayer.prototype.immelman = function(game, friendly, index) {\n  // bind click events to the player's pursuers\n  // have them choose a pursuer\n  this.missile(game, this, index);\n}\n\n\n\n/**************************\nPLAYER ADVANCED TACTICAL FUNCTIONS\n**************************/\n\nPlayer.prototype.healthPack = function(game, friendly, index) {\n  if (index === undefined) {\n    index = 0;\n  }\n  this.repairDrone(game, friendly, index, 5, 0);\n}\n\nPlayer.prototype.intercept = function(game) {\n  game.enemyBase.effects.intercepted = true;\n  io.to(game.gameID).emit(\"msg\", intercept.description);\n}\n\nPlayer.prototype.jammer = function(game) {\n  game.enemyBase.effects.jammed = true;\n  io.to(game.gameID).emit(\"msg\", jammer.description);\n}\n\nPlayer.prototype.emp = function(game, friendly) {\n  friendly.effects.emp = true;\n  io.to(game.gameID).emit(\"msg\", this.name + \" blasts \" + friendly.name + \"'s pursuers with an EMP. \"\n              + friendly.name + \" will not be damaged this round.\");\n}\n\nPlayer.prototype.countermeasures = function(game) {\n  this.effects.countermeasures = true;\n  io.to(game.gameID).emit(\"msg\", this.name + \" prepares countermeasures...\")\n}\n\nPlayer.prototype.divertShields = function(game) {\n  this.effects.divertShields = 5;\n  io.to(game.gameID).emit(\"msg\", this.name + \" powers up shields. Next 5 damage will be negated.\")\n}\n\nPlayer.prototype.jump = function(game) {\n  // shake all pursuers\n  io.to(game.gameID).emit(\"msg\", this.name + \" shakes \" + this.pursuers.length\n              + \" pursuers to the friendly base.\");\n  for (let i = 0; i = this.pursuers.length; i++) {\n    game.enemyDeck.discard.push(this.pursuers.pop());\n  }\n}\n\nPlayer.prototype.hardSix = function(game) {\n  io.to(game.gameID).emit(\"msg\", \"Sometimes you gotta roll the hard six.\");\n  this.missile(game.enemyBase, undefined);\n  this.takeDamage(game, this.calcDamage(4));\n}\n\nPlayer.prototype.snapshot = function(game, friendly, pursuerIndex) {\n  io.to(game.gameID).emit(\"msg\", this.name + \" destroys \" + friendly.pursuers[pursuerIndex].name\n              + \" pursuing \" + friendly.name);\n  game.moveCard(pursuerIndex, friendly.pursuers, game.enemyDeck.discard);\n  this.insertPlaceholder(pursuerIndex);\n}\n\nPlayer.prototype.guidedMissile = function(game) {\n  io.to(game.gameID).emit(\"msg\", this.name + \" fires a guided missile at \" + game.enemyBase.name);\n  game.enemyBase.takeDamage(game, 6);\n}\n\nPlayer.prototype.incinerate = function(game) {\n  io.to(game.gameID).emit(\"msg\", this.name + \" prepares afterburner...\");\n  this.effects.incinerator = true;\n}\n\nPlayer.prototype.medalOfHonor = function() {\n  this.effects.medalOfHonor = true;\n}\n\nPlayer.prototype.deadeye = function() {\n  this.effects.deadeye = true;\n}\n\nPlayer.prototype.negotiator = function() {\n  this.effects.negotiator = true;\n}\n\nPlayer.prototype.daredevil = function() {\n  this.effects.daredevil = true;\n}\n\nPlayer.prototype.heavyArmor = function() {\n  this.effects.heavyArmor = true;\n  this.maxArmor = 15;\n  this.currentArmor = 15;\n}\n\nPlayer.prototype.strategist = function() {\n  this.effects.strategist = true;\n  this.tacticalCardsPerTurn = 4;\n}\n\n/**************************\nGENERIC FUNCTIONS TO USE TACTICAL CARDS\n**************************/\n\nPlayer.prototype.useTactic = function(game, cardIndex, friendly, pursuerIndex) {\n  // takes the index of a card in hand and uses that card\n  // optional argument 'friendly' defines a player target for the card\n  // optional argument 'pursuerIndex' defines an enemy target in friendly.hand\n  if (friendly === undefined) {\n    friendly = this;\n  }\n  if (friendly.id === \"FriendlyBase\") {\n    friendly = game.friendlies[game.findFriendlyBase()];\n  }\n  if (pursuerIndex === undefined) {\n    pursuerIndex = 0;\n  }\n  let card = this.hand[cardIndex];\n  let action = card.cssClass;\n  if (action != \"feint\") {\n    this.lastCardUsed = card;\n    io.to(game.gameID).emit(\"msg\", this.name + \" uses \" + card.name)\n  }\n  this[action](game, friendly, pursuerIndex);\n  game.moveCard(cardIndex, this.hand, game.tacticalDeck.discard)\n  game.nextTurn();\n  return game;\n}\n\nPlayer.prototype.discard = function(game, cardIndex, action, friendly, pursuerIndex, advIndex) {\n  if (friendly === undefined) {\n    friendly = this;\n  }\n  if (friendly.id === \"FriendlyBase\") {\n    friendly = game.friendlies[game.findFriendlyBase()];\n  }\n  if (pursuerIndex === undefined) {\n    pursuerIndex = 0;\n  }\n  if (action === \"useAdvTactic\") {\n    let choice = game.market[advIndex];\n    this.lastCardUsed = choice;\n    let advAction = choice.cssClass;\n    game.advTacticsPurchased.push(advAction);\n    let cost = choice.cost;\n    if (this.effects.negotiator) {\n      cost -= 1;\n    }\n    if (this.merit >= cost) {\n      this.merit -= cost;\n      this[advAction](game, friendly, pursuerIndex);\n      game.removeAdvTactic(advIndex);\n      io.to(game.gameID).emit(\"msg\", this.name + \" uses \" + choice.name);\n    } else {\n      io.to(game.gameID).emit(\"msg\", this.name + \" does not have enough merit.\");\n    }\n  } else {\n    this[action](game, friendly, pursuerIndex);\n  }\n  game.moveCard(cardIndex, this.hand, game.tacticalDeck.discard);\n  game.nextTurn();\n  return game;\n}\n","const Game = function(id, name, difficulty) {\n  this.name = name;\n  this.difficulty = difficulty;\n  this.roundNumber = 0;\n  this.currentTurn = 1;\n  this.friendlies = [];\n  this.enemyBase = new EnemyBase();\n  this.tacticalDeck = new Deck('Tactical Deck');\n  this.advTactics = new Deck('Advanced tactics');\n  this.enemyBaseDeck = new Deck('Enemy Base Deck');\n  this.enemyDeck = new Deck('Enemy Deck');\n  this.market = [];\n  this.marketSize = 4;\n  this.advTacticsPurchased = [];\n  this.enemyBaseCardsPerTurn = 1;\n  this.enemiesActive = [];\n  this.enemiesPerTurn;\n  this.currentEnemyBaseCard = [];\n  this.gameID = id;\n  this.win = false;\n  this.lose = false;\n}\n\nGame.prototype.addEnemy = function() {\n  this.checkDeck(this.enemyDeck);\n  this.enemiesActive.push(this.enemyDeck.cards.pop());\n}\n\nGame.prototype.removeAdvTactic = function(index) {\n  this.moveCard(index, this.market, this.tacticalDeck.discard);\n}\n\nGame.prototype.addAdvTactic = function() {\n  let addToMarket = this.marketSize - this.market.length;\n  for (let i = 0; i < addToMarket; i++) {\n    this.checkDeck(this.advTactics);\n    this.market.push(this.advTactics.cards.pop());\n  }\n}\n\nGame.prototype.moveCard = function(index, origin, destination) {\n  let removed = origin.splice(index, 1);\n  destination.push(removed[0]);\n  origin.join();\n}\n\nGame.prototype.randomIndex = function(number) {\n   let random = Math.floor(Math.random() * number);\n   return random;\n }\n\nGame.prototype.shuffle = function(deck) {\n  let randIndex, x, i;\n  let length, list;\n  if (deck.cards === undefined) {\n    length = deck.length;\n    list = deck;\n  } else {\n    length = deck.cards.length;\n    list = deck.cards;\n  }\n  for (i = length; i; i--) {\n      randIndex = Math.floor(Math.random() * i);\n      x = list[i - 1];\n      list[i - 1] = list[randIndex];\n      list[randIndex] = x;\n  }\n}\n\nGame.prototype.findFriendlyBase = function() {\n  for (let i = 0; i < this.friendlies.length; i++) {\n    let friendly = this.friendlies[i];\n    if (friendly.id === 'FriendlyBase') {\n      return i;\n    }\n  }\n}\n\nGame.prototype.findPlayer = function(id) {\n  for (let i=0; i < this.friendlies.length; i++) {\n    let friendly = this.friendlies[i];\n    if (id === friendly.id) {\n      return friendly;\n    } else if (id === this.enemyBase.id) {\n      return this.enemyBase;\n    }\n  }\n}\n\nGame.prototype.checkDeck = function(deck) {\n  // if deck is empty, replace with discard and shuffle\n  if (deck.cards.length === 0) {\n    while (deck.discard.length > 0) {\n      deck.cards.push(deck.discard.pop());\n    }\n    this.shuffle(deck);\n    deck.shuffles += 1;\n    console.log(deck.name + ' shuffled.');\n  }\n}\n\nGame.prototype.setEmpties = function(twoP, threeP, fourP) {\n  if (this.friendlies.length === 3) {\n    return twoP;\n  } else if (this.friendlies.length === 4) {\n    return threeP;\n  } else {\n    return fourP;\n  }\n}\n\nGame.prototype.sortByMerit = function() {\n  // procedure to sort player order based on merit\n  let friendlySort = [];\n  let highestMerit = 0;\n  let firstFriendlyIndex;\n  let baseIndex;\n  let friendyIndex;\n\n  for (let i = 0; i < this.friendlies.length; i++) {\n    let friendly = this.friendlies[i];\n    // 1. Find the friendly base and set baseIndex to its location.\n    if (friendly.id === 'FriendlyBase') {\n      baseIndex = i;\n    // 2. Determine who has the highest merit.\n    } else if (friendly.merit > highestMerit) {\n      highestMerit = friendly.merit;\n      firstFriendlyIndex = i;\n    // 3. If highest merit is tied, return to default order.\n    } else if (friendly.merit === highestMerit) {\n      firstFriendlyIndex = baseIndex;\n    }\n  }\n  // Reorder the friendly list so that the player with highest merit is first\n  // Original turn order is always maintained.\n  if (firstFriendlyIndex > 0) {\n    let firstPlayer = this.friendlies.splice(firstFriendlyIndex, 1);\n    friendlySort.push(firstPlayer[0]);\n    this.friendlies.join();\n    while (this.friendlies.length > 0) {\n      if (firstFriendlyIndex < this.friendlies.length) {\n        let firstPlayer = this.friendlies.splice(firstFriendlyIndex, 1);\n        friendlySort.push(firstPlayer[0]);\n        this.friendlies.join();\n      } else {\n        friendlySort.push(this.friendlies.shift());\n      }\n    }\n    this.friendlies = friendlySort;\n  }\n}\n\nGame.prototype.addToDeck = function(deck, type, amount) {\n  // procedure that adds cards to a given deck\n  while (amount > 0) {\n    deck.cards.push(type);\n    amount--;\n  }\n  return deck;\n}\n\nGame.prototype.replaceCards = function(amount, deck, active) {\n  // prodecure for replacing active cards\n  let discarding = amount;\n  for (var i = amount; i > 0; i--) {\n    if (active.length > 0) {\n      deck.discard.push(active.pop());\n    }\n  }\n  for (var i = 0; i < amount; i++) {\n    this.checkDeck(deck);\n    active.push(deck.cards.pop());\n    discarding++;\n  }\n}\n\nGame.prototype.distributeEnemies = function(source) {\n  while (source.length > 0) {\n    for (let i = 0; i < this.friendlies.length; i++) {\n      let friendly = this.friendlies[i];\n      if (friendly.effects.dead) {\n        continue;\n      } else {\n        if (source.length > 0 && friendly.effects.incinerator) {\n          friendly.pursuers.push(source.pop());\n          io.to(this.id).emit('msg', friendly.name + ' incinerates ' + friendly.pursuers[friendly.pursuers.length-1].name);\n          this.enemyDeck.discard.push(friendly.pursuers.pop());\n          friendly.effects.incinerator = false;\n        } else if (source.length > 0) {\n          friendly.pursuers.push(source.pop());\n        } else {\n          break;\n        }\n        friendly.adjustPursuerDamage();\n      }\n    }\n  }\n}\n\n//build enemy base deck\nGame.prototype.buildEnemyBaseDeck = function() {\n  this.enemyBaseDeck = new Deck('Enemy Base Deck');\n  this.addToDeck(this.enemyBaseDeck, fireLight, 3);\n  this.addToDeck(this.enemyBaseDeck, fireHeavy, 2);\n  this.addToDeck(this.enemyBaseDeck, deploy, 2);\n  this.addToDeck(this.enemyBaseDeck, repair, 3);\n  let deckSize = this.enemyBaseDeck.cards.length;\n  let subDeckSize = Math.floor(deckSize/this.difficulty);\n  let splitDecks = {};\n  for (let i = 0; i < this.difficulty; i++) {\n    let key = 'd' + i;\n    if (this.enemyBaseDeck.cards.length > subDeckSize + 1) {\n      splitDecks[key] = this.enemyBaseDeck.cards.splice(0, subDeckSize);\n    } else {\n      splitDecks[key] = this.enemyBaseDeck.cards;\n    }\n  }\n  let deckAssembled = [];\n  for (deck in splitDecks) {\n    splitDecks[deck].push(reinforce);\n    this.shuffle(splitDecks[deck]);\n    while (splitDecks[deck].length > 0) {\n      deckAssembled.push(splitDecks[deck].pop());\n    }\n  }\n  this.enemyBaseDeck.cards = deckAssembled;\n}\n\nGame.prototype.replaceEnemyBaseCard = function() {\n  if (this.enemyBase.effects.jammed === true) {\n    this.enemyBaseDeck.discard.push(this.currentEnemyBaseCard.pop());\n    this.enemyBase.effects.jammed = false;\n  } else {\n    this.replaceCards(this.enemyBaseCardsPerTurn, this.enemyBaseDeck,\n                      this.currentEnemyBaseCard);\n    let ebCard = this.currentEnemyBaseCard[0];\n    this.enemyBase[ebCard.cssClass](this);\n  }\n}\n\nGame.prototype.update = function() {\n  for (let i = 0; i < this.friendlies.length; i++) {\n    let friendly = this.friendlies[i];\n    friendly.updateSummary();\n  }\n  this.enemyBase.updateSummary(this);\n}\n\nGame.prototype.checkDeaths = function() {\n  for (let i = 0; i < this.friendlies.length; i++) {\n    let friendly = this.friendlies[i];\n    if (friendly.id === 'FriendlyBase' || friendly.effects.dead) {\n      continue;\n    } else if (friendly.currentArmor === 0){\n      friendly.destroyed(this, 'KIA');\n    }\n  }\n}\n\nGame.prototype.round = function() {\n  this.roundNumber++;\n  io.to(this.gameID).emit('msg', 'Round ' + this.roundNumber);\n  // add enemies and game.advTactics tactics into play\n  if (this.roundNumber === 1) {\n    this.replaceCards(this.startingEnemies, this.enemyDeck,\n                      this.enemiesActive);\n    this.replaceCards(this.marketSize, this.advTactics,\n                      this.market);\n  } else {\n    let newEnemies = this.enemiesPerTurn;\n    if (this.enemyBase.effects.intercepted === true) {\n      newEnemies -= 1;\n      this.enemyBase.effects.intercepted = false;\n    }\n    for (let i = 0; i < newEnemies; i++) {\n      this.addEnemy();\n    }\n    if (this.enemyBase.effects.deploy === true) {\n      this.addEnemy();\n      this.enemyBase.effects.deploy = false;\n    }\n    this.addAdvTactic();\n  }\n\n  this.sortByMerit();\n\n  this.distributeEnemies(this.enemiesActive);\n\n  // replace tactical cards from last turn\n  for (let i = 0; i < this.friendlies.length; i++) {\n    let friendly = this.friendlies[i];\n    if (friendly.id === 'FriendlyBase' || friendly.effects.dead) {\n      continue;\n    } else {\n      friendly.resetCardsUsed();\n      this.replaceCards(friendly.tacticalCardsPerTurn,\n                        this.tacticalDeck, friendly.hand);\n    }\n  }\n}\n\nGame.prototype.postRound = function() {\n  // discard empty space cards and remove place holders, damage friendlies\n  for (let i = 0; i < this.friendlies.length; i++) {\n    let friendly = this.friendlies[i];\n    let damage = 0;\n    for (let x = friendly.pursuers.length-1; x >= 0; x--) {\n      let enemy = friendly.pursuers[x];\n      if (enemy.cssClass === 'destroyed') {\n        friendly.pursuers.splice(x, 1);\n        friendly.pursuerDamage.splice(x, 1);\n      } else if (enemy.cssClass === 'emptySpace') {\n        this.moveCard(x, friendly.pursuers, this.enemyDeck.discard);\n        friendly.pursuerDamage.splice(x, 1);\n      } else {\n        damage += enemy.power;\n      }\n    }\n    friendly.takeDamage(this, friendly.checkDamageNegation(this, damage));\n  }\n  this.checkDeaths();\n  this.replaceEnemyBaseCard();\n}\n\nGame.prototype.adjustTurn = function() {\n  // skips friendly base and dead pilots in turn order\n  if (this.currentTurn >= this.friendlies.length\n      || (this.currentTurn === this.friendlies.length-1\n      && this.friendlies[this.currentTurn].id === 'FriendlyBase')\n      || (this.currentTurn === this.friendlies.length-1\n      && this.friendlies[this.currentTurn].effects.dead)) {\n    this.currentTurn = 0;\n  }\n}\n\nGame.prototype.nextTurn = function() {\n  this.checkDeaths();\n  this.update();\n  if (!this.win && !this.lose) {\n    let cardsLeft = 0;\n    let strategist = false;\n    this.friendlies.forEach((friendly) => {\n      if (friendly.id === 'FriendlyBase') {\n        cardsLeft += 0;\n      } else {\n        if (friendly.effects.strategist) {\n          strategist = true;\n        }\n        cardsLeft += friendly.hand.length;\n      }\n    });\n    if (cardsLeft === 0 || (strategist && cardsLeft === 1)) {\n      this.nextRound();\n      this.currentTurn = 0;\n    } else {\n      this.currentTurn += 1;\n    }\n    if (!this.win && !this.lose) {\n      this.adjustTurn();\n      while (this.friendlies[this.currentTurn].id === 'FriendlyBase'\n            || this.friendlies[this.currentTurn].effects.dead) {\n        this.currentTurn += 1;\n        this.adjustTurn();\n      }\n    }\n  }\n}\n\nGame.prototype.nextRound = function() {\n  this.postRound();\n  if (!this.win && !this.lose) {\n    this.round();\n  }\n  this.update();\n}\n\nGame.prototype.buildDecks = function() {\n  // build tactical deck\n  this.addToDeck(this.tacticalDeck, missile, 6);\n  this.addToDeck(this.tacticalDeck, scatterShot, 4);\n  this.addToDeck(this.tacticalDeck, drawFire, 3);\n  this.addToDeck(this.tacticalDeck, feint, 4);\n  this.addToDeck(this.tacticalDeck, barrelRoll, 2);\n  this.addToDeck(this.tacticalDeck, immelman, 3);\n  this.addToDeck(this.tacticalDeck, repairDrone, 2);\n\n  this.tacticalDeck.size = this.tacticalDeck.cards.length;\n\n  this.shuffle(this.tacticalDeck);\n\n  // build advanced tactical deck\n  this.addToDeck(this.advTactics, healthPack, 5);\n  this.addToDeck(this.advTactics, heatSeeker, 6);\n  this.addToDeck(this.advTactics, bomb, 3);\n  this.addToDeck(this.advTactics, snapshot, 3);\n  this.addToDeck(this.advTactics, guidedMissile, 3);\n  this.addToDeck(this.advTactics, incinerate, 3);\n  this.addToDeck(this.advTactics, jammer, 6);\n  this.addToDeck(this.advTactics, intercept, 3);\n  this.addToDeck(this.advTactics, emp, 2);\n  this.addToDeck(this.advTactics, countermeasures, 3);\n  this.addToDeck(this.advTactics, divertShields, 2);\n  this.addToDeck(this.advTactics, jump, 1);\n  this.addToDeck(this.advTactics, hardSix, 4);\n\n  this.advTactics.size = this.advTactics.cards.length;\n\n  this.shuffle(this.advTactics);\n\n  // build enemy deck\n  this.addToDeck(this.enemyDeck, ace, 4);\n  this.addToDeck(this.enemyDeck, heavy, 8);\n  this.addToDeck(this.enemyDeck, medium, 12);\n  this.addToDeck(this.enemyDeck, light, 16);\n  this.addToDeck(this.enemyDeck, empty, this.setEmpties(8, 4, 0));\n\n  this.enemyDeck.size = this.enemyDeck.cards.length;\n\n  this.shuffle(this.enemyDeck);\n\n  // build enemy base deck\n  this.buildEnemyBaseDeck();\n\n  this.enemyBaseDeck.size = this.enemyBaseDeck.cards.length;\n\n  // set rules dependent on amount of players\n  this.startingEnemies = this.friendlies.length * 2;\n  this.enemiesPerTurn = this.friendlies.length;\n}\n","// Tactical cards\nlet repairDrone = new Tactical(\"Repair drone\", \"repairDrone\", \"Remove 3 damage from a friendly (any)\");\nlet missile = new Tactical(\"Missile\", \"missile\", \"Damage a target for a 'fire' roll plus a missile die\");\nlet drawFire = new Tactical(\"Draw Fire\", \"drawFire\", \"Remove a pursuer from a friendly and bring it to you\");\nlet feint = new Tactical(\"Feint\", \"feint\", \"Reuse the last tactical card you used this round\");\nlet barrelRoll = new Tactical(\"Barrel Roll\", \"barrelRoll\", \"Remove a pursuer from yourself. It now pursues the friendly base\");\nlet scatterShot = new Tactical(\"Scattershot\", \"scatterShot\", \"Deal 2 damage to a target, and 1 damage to each adjacent target (ff)\");\nlet immelman = new Tactical(\"Immelman\", \"immelman\", \"Missile an enemy pursuing you\");\n\n// Advanced tactics\n// let medalOfHonor = new AdvTactical(\"Medal of Honor\", \"medalOfHonor\", \"Every enemy destroyed is worth 1 extra merit\", 10);\n// let daredevil = new AdvTactical(\"Daredevil\", \"daredevil\", \"Allows you to attack the EB with 1 pursuer\", 10);\n// let medic = new AdvTactical(\"Medic\", \"medic\", \"Restore 1 armor to a friendly of your choice each round\", 10);\n// let sharpShooter = new AdvTactical(\"Sharp Shooter\", \"sharpshooter\", \"Improve player accuracy rolls/add an extra die\", 10);\nlet bomb = new AdvTactical(\"Bomb\", \"bomb\", \"Deal 6 damage to a target, and 2 damage to each adjacent target (or friendly)\", 8);\nlet heatSeeker = new AdvTactical(\"Heat Seeker\", \"heatSeeker\", \"Deal 5 damage to a chosen enemy\", 5);\nlet healthPack = new AdvTactical(\"Emergency repairs\", \"healthPack\", \"Remove 5 damage from a friendly (any)\", 4);\nlet jammer = new AdvTactical(\"Jammer\", \"jammer\", \"Do not draw an enemy base card next round\", 6);\nlet intercept = new AdvTactical(\"Intercept\", \"intercept\", \"Draw one less enemy into play next round\", 6);\nlet emp = new AdvTactical(\"EMP\", \"emp\", \"Choose a friendly (other). Their pursuers cannot damage them this round\", 5);\nlet countermeasures = new AdvTactical(\"Counter measures\", \"countermeasures\", \"Ignore damage this round equal to the result of a 'fire' roll\", 2);\nlet divertShields = new AdvTactical(\"Divert Shields\", \"divertShields\", \"Keep this card. It absorbs the next 5 damage you take\", 3);\nlet jump = new AdvTactical(\"Jump\", \"jump\", \"Discard all of your pursuers this round\", 15);\nlet hardSix = new AdvTactical(\"Roll the hard six\", \"hardSix\", \"If pursued, missile the enemy base and take damage of a 'fire' roll\", 6);\nlet snapshot = new AdvTactical(\"Snapshot\", \"snapshot\", \"Remove an enemy from play (no merit awarded)\", 7);\nlet guidedMissile = new AdvTactical(\"Guided Missile\", \"guidedMissile\", \"Deal 6 damage to the enemy base, even if pursued\", 10);\nlet incinerate = new AdvTactical(\"Incinerate\", \"incinerate\", \"Destroy the first enemy drawn to you next round\", 7);\n\n\n// define enemy types\nlet ace = new Enemy(\"Ace\",\"ace\",6,4,5,4);\nlet heavy = new Enemy(\"Heavy\",\"heavy\",5,3,3,3);\nlet medium = new Enemy(\"Medium\",\"medium\",4,2,4,2);\nlet light = new Enemy(\"Light\",\"light\",3,2,4,1);\nlet empty = new Enemy(\"Empty space\",\"emptySpace\",0,0,0,0);\nlet placeHolder = new Enemy(\"Destroyed\",\"destroyed\",0,0,0,0);\n\n// define enemy base cards\nlet fireLight = new EnemyBaseCard(\"Fire light weapons\", \"fireLight\", \"Dealt 3 damage to Friendly Base\");\nlet fireHeavy = new EnemyBaseCard(\"Fire heavy weapons\", \"fireHeavy\", \"Dealt 5 damage to Friendly Base\");\nlet deploy = new EnemyBaseCard(\"Deploy\", \"deploy\", \"Launched an extra enemy fighter\");\nlet repair = new EnemyBaseCard(\"Repairs\", \"repair\", \"Repaired 5 armor.\");\nlet reinforce = new EnemyBaseCard(\"Reinforcements\", \"reinforce\", \"Increased launch rate by 1\");\n","// requirements\nlet http = require('http');\nlet express = require('express');\nlet bodyParser = require('body-parser');\nlet mongoose = require('mongoose');\nlet session = require('express-session');\nlet socketio = require('socket.io');\nlet User = require('./js/models/user');\nlet GameSession = require('./js/models/game');\nlet MongoStore = require('connect-mongo')(session);\n// build app\nlet app = express();\nlet server = http.createServer(app);\nlet io = socketio(server);\n// globals\nlet gameTitle = \"Contact!\";\nlet root = __dirname;\nlet port = process.env.PORT || 8080;\n\n\n// mongodb connection\nlet mongoUri = 'mongodb://heroku_rmsqzvkd:oavs0o32a02l6vc163tbennr9s@ds119608.mlab.com:19608/heroku_rmsqzvkd';\nlet localUri = 'mongodb://localhost:27017/starfire';\nmongoose.connect(mongoUri);\nlet db = mongoose.connection;\n\n// mongo error\ndb.on('error', console.error.bind(console, 'connection error:'));\n\n// use sessions for tracking logins\napp.use(session({\n  secret: 'Do a barrel roll!',\n  resave: true,\n  saveUninitialized: false,\n  store: new MongoStore({\n    mongooseConnection: db\n  })\n}));\n\n// make user ID available in app and templates\napp.use(function (req, res, next) {\n  res.locals.currentUser = req.session.userId;\n  res.locals.currentGame = req.session.gameId;\n  next();\n})\n\n// parse incoming requests\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n\n// serve static files from root\napp.use(express.static(root));\n\n// view engine setup\napp.set('view engine', 'pug');\napp.set('views', __dirname + '/views');\n\n// include routes\nlet routes = require('./js/routes/index');\napp.use('/', routes);\n\n// 404 handler\napp.use(function(req, res, next) {\n  var err = new Error('File Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  let backUrl;\n  let backPrompt;\n  if (req.session.userId) {\n    backUrl = req.header('Referer') || '/login';\n    backPrompt = 'Go back';\n  } else {\n    backUrl = '/login';\n    backPrompt = 'Go to login'\n  }\n  res.status(err.status || 500);\n  res.render('error', {\n    gameTitle: gameTitle,\n    statusMessage: err.message || 'There was en error processing your request',\n    error: {},\n    backPrompt: backPrompt,\n    backUrl: backUrl\n  });\n});\n\nserver.listen(port, () => console.log('Ready. Listening at http://localhost:' + port));\n\nio.on('connect', onConnection);\n","function getUser(userId, callback) {\n  User.findById(userId, function(error, user) {\n    if (error) {\n      callback(err, null);\n    } else if (user === null) {\n      console.error('Error fetching game session');\n    } else {\n      callback(null, user);\n    }\n  });\n}\n\nfunction getGameSession(gameId, callback) {\n  GameSession.findById(gameId, function(error, game) {\n    if (error) {\n      callback(err, null);\n    } else if (game === null) {\n      console.error('Error fetching game session');\n    } else {\n      callback(null, game);\n    }\n  });\n}\n\nfunction saveGame(game) {\n  getGameSession(game.gameID, function(err, gameSession) {\n    if (err) {\n      console.error(err);\n    } else if (gameSession === null) {\n      console.error(\"Error fetching game session on save\");\n    } else {\n      let endTime = new Date();\n      let ms = endTime - gameSession.meta.startTime;\n      let min = Math.round(ms/1000/60);\n      gameSession.meta.rounds = game.roundNumber;\n      gameSession.meta.shuffles.tactical = game.tacticalDeck.shuffles;\n      gameSession.meta.shuffles.enemy = game.enemyDeck.shuffles;\n      gameSession.meta.advTacticsPurchased = game.advTacticsPurchased;\n      gameSession.meta.endTime = endTime;\n      gameSession.meta.elapsedTime = min;\n      gameSession.meta.hp.enemyBase = game.enemyBase.currentArmor;\n      for (let i=0; i < game.friendlies.length; i++) {\n        let friendly = game.friendlies[i];\n        gameSession.meta.hp[friendly.id] = friendly.currentArmor;\n      }\n      if (game.win || game.lose) {\n        gameSession.gameName = gameSession._id;\n        if (game.win) {\n          io.to(game.gameID).emit('end', 'Victory!');\n          gameSession.meta.won = true;\n          gameSession.save(function(err, updatedSession) {\n            if (err) {\n              console.error(err);\n            } else {\n              updateObjects(game.gameID, updatedSession);\n              updatedSession.players = undefined;\n              updatedSession.difficulty = undefined;\n              updatedSession.state = undefined;\n              updatedSession.save();\n              for (let i = 1; i < 5; i++) {\n                let user = 'user' + i;\n                if (updatedSession.users[user] && updatedSession.users[user].name !== '') {\n                  let query = { callsign: updatedSession.users[user].name };\n                  User.find(query, function(err, player) {\n                    if (err) {\n                      console.error(err);\n                    } else {\n                      let wins = player[0].meta.wins + 1;\n                      function getRank(number, list, inc) {\n                      \tif (number <= list.length*inc && number % inc === 0) {\n                      \t\treturn list[number/inc-1];\n                        }\n                      }\n                      let ranks = ['Lieutenant', 'Captain', 'Major', 'Lt. Colonel', 'Colonel', 'Commander', 'Admiral'];\n                      let query = player[0];\n                      let rank = getRank(wins, ranks, 3) || player[0].meta.rank;\n                      let update = { 'meta.wins': wins, 'meta.rank': rank };\n                      if (wins <= 21 && wins % 3 === 0) {\n                        console.log(player[0].callsign + \" promoted to \" + rank);\n                      }\n                      User.update(query, update, function() {\n                        console.log(updatedSession.users[user].name + \" updated\");\n                      });\n                    }\n                  });\n                } else {\n                  continue;\n                }\n              }\n            }\n          });\n        } else {\n          io.to(game.gameID).emit('end', 'Defeat!');\n          gameSession.meta.lost = true;\n          gameSession.save(function(err, updatedSession) {\n            if (err) {\n              console.error(err);\n            } else {\n              updateObjects(game.gameID, updatedSession);\n              updatedSession.players = undefined;\n              updatedSession.difficulty = undefined;\n              updatedSession.state = undefined;\n              updatedSession.save();\n              for (let i = 1; i < 5; i++) {\n                let user = 'user' + i;\n                if (updatedSession.users[user] && updatedSession.users[user].name !== '') {\n                  let query = { callsign: updatedSession.users[user].name };\n                  let update = { $inc: { 'meta.losses': 1 }};\n                  User.update(query, update, function() {\n                    console.log(updatedSession.users[user].name + \" updated\");\n                  });\n                } else {\n                  continue;\n                }\n              }\n            }\n          });\n        }\n      } else {\n        gameSession.state = [game];\n        gameSession.save(function(err, updatedSession) {\n          if (err) {\n            console.error(err);\n          } else {\n            updateObjects(game.gameID, updatedSession);\n          }\n        });\n      }\n    }\n  });\n}\n\nfunction onConnection(socket) {\n  let gameId = socket.request._query['room'];\n  let userId = socket.request._query['user'];\n\n  function join(player) {\n    socket.join(gameId);\n    getGameSession(gameId, function(err, gameSession) {\n      if (err) {\n        console.error(err);\n      } else {\n        getUser(userId, function(err, user) {\n          if (err) {\n            console.error(err);\n          } else {\n            for (person in gameSession.users) {\n              if (gameSession.users[person] && gameSession.users[person].name === user.callsign) {\n                let ability = gameSession.users[person].ability;\n                player[ability]();\n              }\n            }\n            player.name = user.callsign;\n            console.log(user.callsign + ' joined ' + gameId + ' as ' + player.id);\n            socket.emit('assign', { player: player } );\n            socket.on('turn', turn);\n            socket.on('chat', function(data) {\n              io.to(data.room).emit('chatMessage', data.message);\n              if (data.message.toLowerCase().includes('what do you hear')) {\n                io.to(data.room).emit('msg', \"Nothin' but the wind\");\n              }\n              if (data.message.toLowerCase().includes('good hunting')) {\n                io.to(data.room).emit('msg', \"So say we all!\");\n              }\n            });\n            io.to(gameId).emit('msg', user.callsign + ' joined the game.');\n            socket.on('disconnect', function() {\n              console.log('User disconnected');\n              getGameSession(gameId, function(err, gameSession) {\n                if (err) {\n                  console.error(err);\n                } else {\n                  if (!gameSession.meta.lost && !gameSession.meta.won) {\n                    io.to(gameId).emit('msg', user.callsign + ' left.');\n                    let setNewLeader = false;\n                    for (person in gameSession.users) {\n                      if (gameSession.users[person] && gameSession.users[person].name === user.callsign) {\n                        if (gameSession.users[person].leader) {\n                          setNewLeader = true;\n                          gameSession.users[person].leader = false;\n                        }\n                        gameSession.users[person].name = '';\n                        gameSession.users[person].socketId = '';\n                        gameSession.players -= 1;\n                      }\n                    }\n                    if (setNewLeader) {\n                      if (gameSession.users.user1.name.length > 0) {\n                        gameSession.users.user1.leader = true;\n                        io.to(gameSession.users.user1.socketId).emit('firstPlayer');\n                      } else if (gameSession.users.user2.name.length > 0) {\n                        gameSession.users.user2.leader = true;\n                        io.to(gameSession.users.user2.socketId).emit('firstPlayer');\n                      } else if (gameSession.users.user3.name.length > 0) {\n                        gameSession.users.user3.leader = true;\n                        io.to(gameSession.users.user3.socketId).emit('firstPlayer');\n                      } else if (gameSession.users.user4.name.length > 0) {\n                        gameSession.users.user4.leader = true;\n                        io.to(gameSession.users.user4.socketId).emit('firstPlayer');\n                      }\n                    }\n                    if (gameSession.players === 0) {\n                      gameSession.meta.aborted = true;\n                      gameSession.gameName = gameSession._id;\n                      console.log('Game ' + gameSession._id + ' aborted');\n                      if (gameSession.state.length > 0) {\n                        let endTime = new Date();\n                        let ms = endTime - gameSession.meta.startTime;\n                        let min = Math.round(ms/1000/60);\n                        gameSession.meta.endTime = endTime;\n                        gameSession.meta.elapsedTime = min;\n                      }\n                      gameSession.state = undefined;\n                      gameSession.players = undefined;\n                      gameSession.difficulty = undefined;\n                    } else {\n                      if (gameSession.state.length === 0) {\n                        if (gameSession.meta.locked) {\n                          gameSession.meta.locked = false;\n                        } else if (gameSession.players === 1) {\n                          io.to(gameId).emit('closeGame');\n                          io.to(gameId).emit('msg', 'Waiting for second player...')\n                        }\n                      } else {\n                        // logic for leaving during active game\n                        // currently destroys leaving player's pilot\n                        // eventually replace this logic with re-entry option\n                        console.log(user.callsign + ' left during active game');\n                        loadGame(gameSession, undefined, function(game) {\n                          for (let i=0; i < game.friendlies.length; i++) {\n                            let friendly = game.friendlies[i];\n                            if (friendly.name === user.callsign) {\n                              friendly.destroyed(game, 'MIA');\n                              break;\n                            }\n                          }\n                          game.nextTurn();\n                          saveGame(game);\n                        });\n                      }\n                    }\n                    gameSession.save(function (err, updatedSession) {\n                      if (err) {\n                        console.error(err);\n                      } else {\n                        console.log('User removed from ' + updatedSession._id);\n                      }\n                    });\n                  }\n                }\n              });\n              socket.leave(gameId);\n            });\n            getGameSession(gameId, function(err, gameSession) {\n              if (err) {\n                console.error(err);\n              } else {\n                if (gameSession.players === 1) {\n                  gameSession.users.user1.leader = true;\n                }\n                for (person in gameSession.users) {\n                  if (gameSession.users[person] && gameSession.users[person].name === user.callsign) {\n                    gameSession.users[person].socketId = socket.id;\n                  }\n                }\n                gameSession.save();\n              }\n            })\n          }\n        });\n      }\n    });\n  }\n\n  function addPlayer(gameId, userId) {\n    getGameSession(gameId, function(err, gameSession) {\n      if (err) {\n        console.error(err);\n      } else {\n        getUser(userId, function(err, user) {\n          if (err) {\n            console.error(err);\n          } else {\n            if (gameSession.users.user1.name === user.callsign) {\n              let Player1 = new Player('Player1');\n              join(Player1);\n            } else if (gameSession.users.user2.name === user.callsign) {\n              let Player2 = new Player('Player2');\n              join(Player2);\n            } else if (gameSession.users.user3.name === user.callsign) {\n              let Player3 = new Player('Player3');\n              join(Player3);\n            } else if (gameSession.users.user4.name === user.callsign) {\n              let Player4 = new Player('Player4');\n              join(Player4);\n            }\n          }\n        });\n      }\n    });\n  }\n\n  getGameSession(gameId, function(err, gameSession) {\n    if (err) {\n      console.error(err);\n    } else {\n      if (gameSession.players === 4) {\n        addPlayer(gameId, userId);\n        io.to(gameId).emit('msg', 'Game full');\n        gameSession.meta.locked = true;\n        gameSession.save();\n      } else if (gameSession.players === 3) {\n        addPlayer(gameId, userId);\n      } else if (gameSession.players === 2) {\n        addPlayer(gameId, userId);\n        io.to(gameId).emit('msg', 'Game ready');\n        io.to(gameId).emit('openGame');\n      } else {\n        let Player1 = new Player('Player1');\n        join(Player1);\n        socket.emit('msg', 'Waiting for second player...');\n        socket.emit('firstPlayer');\n        socket.on('startGame', function(data) {\n          let gameId = data.room;\n          getGameSession(gameId, function(err, gameSession) {\n            if (err) {\n              console.error(err);\n            } else {\n              if (gameSession.players >= 2) {\n                let update = {\n                  'meta.locked': true,\n                  'meta.startTime': new Date(),\n                  'meta.endTime': new Date()\n                };\n                GameSession.update(gameSession, update, function() {\n                  io.to(gameId).emit('start');\n                  let game = new Game(gameSession._id, gameSession.gameName, gameSession.difficulty);\n                  let FriendlyBase = new Friendly(\"FriendlyBase\", gameSession.gameName, 30);\n                  let Player1;\n                  let Player2;\n                  let Player3;\n                  let Player4;\n                  game.friendlies = [FriendlyBase];\n                  gameSession.meta.hp.FriendlyBase = FriendlyBase.currentArmor;\n                  gameSession.meta.players = gameSession.players;\n                  gameSession.meta.users = [gameSession.users.user1.name];\n                  gameSession.meta.difficulty = gameSession.difficulty;\n                  if (gameSession.users.user1 && gameSession.users.user1.name !== \"\") {\n                    Player1 = new Player('Player1', gameSession.users.user1.name);\n                    Player1[gameSession.users.user1.ability]();\n                    game.friendlies.push(Player1);\n                    gameSession.meta.users.push(gameSession.users.user1.name);\n                    gameSession.meta.hp.Player1 = Player1.currentArmor;\n                  } else {\n                    gameSession.users.user1 = undefined;\n                    gameSession.meta.hp.Player1 = undefined;\n                  }\n                  if (gameSession.users.user2 && gameSession.users.user2.name !== \"\") {\n                    Player2 = new Player('Player2', gameSession.users.user2.name);\n                    Player2[gameSession.users.user2.ability]();\n                    game.friendlies.push(Player2);\n                    gameSession.meta.users.push(gameSession.users.user2.name);\n                    gameSession.meta.hp.Player2 = Player2.currentArmor;\n                  } else {\n                    gameSession.users.user2 = undefined;\n                    gameSession.meta.hp.Player2 = undefined;\n                  }\n                  if (gameSession.users.user3 && gameSession.users.user3.name !== \"\") {\n                    Player3 = new Player('Player3', gameSession.users.user3.name);\n                    Player3[gameSession.users.user3.ability]();\n                    game.friendlies.push(Player3);\n                    gameSession.meta.users.push(gameSession.users.user3.name);\n                    gameSession.meta.hp.Player3 = Player3.currentArmor;\n                  } else {\n                    gameSession.users.user3 = undefined;\n                    gameSession.meta.hp.Player3 = undefined;\n                  }\n                  if (gameSession.users.user4 && gameSession.users.user4.name !== \"\") {\n                    Player4 = new Player('Player4', gameSession.users.user4.name);\n                    Player4[gameSession.users.user4.ability]();\n                    game.friendlies.push(Player4);\n                    gameSession.meta.users.push(gameSession.users.user4.name);\n                    gameSession.meta.hp.Player4 = Player4.currentArmor;\n                  } else {\n                    gameSession.users.user4 = undefined;\n                    gameSession.meta.hp.Player4 = undefined;\n                  }\n                  game.buildDecks();\n                  game.round();\n                  game.update();\n                  gameSession.state.push(game);\n                  gameSession.save(function(err, updatedSession) {\n                    if (err) {\n                      console.error(err)\n                    } else {\n                      updateObjects(gameId, updatedSession);\n                    }\n                  });\n                });\n              } else {\n                console.error('Error launching game.');\n              }\n            }\n          });\n        });\n      }\n    }\n  });\n}\n\nfunction updateObjects(gameId, gameSession) {\n  let gameData = {\n    game: gameSession.state[0],\n  }\n  io.to(gameId).emit('update', gameData);\n}\n\nfunction loadGame(gameSession, specs, callback) {\n  let game = new Game(gameSession._id, gameSession.gameName, gameSession.difficulty)\n  let FriendlyBase = new Friendly('FriendlyBase', gameSession.gameName, 30);\n  let Player1 = new Player('Player1');\n  let Player2 = new Player('Player2');\n  let Player3 = new Player('Player3');\n  let Player4 = new Player('Player4');\n  let gameState = gameSession.state[0];\n  let loadPlayer = function(player, friendly) {\n    player.name = friendly.name;\n    player.maxArmor = friendly.maxArmor;\n    player.currentArmor = friendly.currentArmor;\n    player.lastCardUsed = friendly.lastCardUsed;\n    player.hand = friendly.hand;\n    player.pursuers = friendly.pursuers;\n    player.pursuerDamage = friendly.pursuerDamage;\n    player.merit = friendly.merit;\n    player.effects = friendly.effects;\n    player.tacticalCardsPerTurn = friendly.tacticalCardsPerTurn;\n    game.friendlies.push(player);\n  }\n  for (let i = 0; i < gameState.friendlies.length; i++) {\n    let friendly = gameState.friendlies[i];\n    if (friendly.id === 'FriendlyBase') {\n      FriendlyBase.pursuers = friendly.pursuers;\n      FriendlyBase.pursuerDamage = friendly.pursuerDamage;\n      FriendlyBase.effects = friendly.effects;\n      FriendlyBase.currentArmor = friendly.currentArmor;\n      game.friendlies.push(FriendlyBase);\n    } else if (friendly.id === 'Player1') {\n      loadPlayer(Player1, friendly);\n    } else if (friendly.id === 'Player2') {\n      loadPlayer(Player2, friendly);\n    } else if (friendly.id === 'Player3') {\n      loadPlayer(Player3, friendly);\n    } else if (friendly.id === 'Player4') {\n      loadPlayer(Player4, friendly);\n    }\n  }\n  game.roundNumber = gameState.roundNumber;\n  game.currentTurn = gameState.currentTurn;\n  game.tacticalDeck = gameState.tacticalDeck;\n  game.advTactics = gameState.advTactics;\n  game.advTacticsPurchased = gameState.advTacticsPurchased;\n  game.enemyBaseDeck = gameState.enemyBaseDeck;\n  game.enemyDeck = gameState.enemyDeck;\n  game.market = gameState.market;\n  game.enemiesActive = gameState.enemiesActive;\n  game.enemiesPerTurn = gameState.enemiesPerTurn;\n  game.currentEnemyBaseCard = gameState.currentEnemyBaseCard;\n  game.win = gameState.win;\n  game.lose = gameState.lose;\n  game.enemiesPerTurn = gameState.enemiesPerTurn;\n  game.enemyBase.currentArmor = gameState.enemyBase.currentArmor;\n  game.enemyBase.effects = gameState.enemyBase.effects;\n  callback(game, specs);\n}\n\nfunction turn(data) {\n  let gameId = data.room;\n  let specs = data.turnInfo;\n  getGameSession(gameId, function(err, gameSession) {\n    if (err) {\n      console.error(err);\n    } else if (!gameSession || !gameSession.state) {\n      console.error(\"Error: Turn attempted outside of active game session: \" + gameId);\n    } else {\n      loadGame(gameSession, specs, turnAction);\n    }\n  });\n}\n\nfunction turnAction(game, specs) {\n  let getPlayer = function(id) {\n    for (let i=0; i < game.friendlies.length; i++) {\n      let friendly = game.friendlies[i];\n      if (id === friendly.id) {\n        return friendly;\n      } else if (id === game.enemyBase.id) {\n        return game.enemyBase;\n      }\n    }\n  }\n\n  let friendly = undefined;\n  let player = getPlayer(specs.player.id);\n  if (specs.friendly !== undefined) {\n    friendly = getPlayer(specs.friendly.id);\n  }\n\n  if (game.currentTurn === game.friendlies.indexOf(player)) {\n    if (specs.button === 'use') {\n      game = player.useTactic(game, specs.cardIndex, friendly, specs.pursuerIndex);\n    } else {\n      game = player.discard(game, specs.cardIndex, specs.button, friendly,\n                                                                specs.pursuerIndex,\n                                                                specs.purchaseIndex);\n    }\n    saveGame(game);\n  } else {\n    io.to(game.gameID).emit('msg', 'Cheating attempt detected');\n    console.error(\"Turn attempted out of turn order: \" + game.gameID);\n  }\n}\n"]}